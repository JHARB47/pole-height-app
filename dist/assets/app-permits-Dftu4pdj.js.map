{"version":3,"mappings":"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","names":["makePermitSummary","env","results","job","effectiveProfile","cachedMidspans","store","type","cacheForEnv","m","targetNumbers","v","controllingEnvTarget","targetSource","controllingEntry","best","_a","_b","_c","_d","_e","_g","_f","_i","_h","fillPdfWithFields","basePdfBytes","fields","layout","loadPdfLib","__vitePreload","n","PDFDocument","StandardFonts","rgb","doc","font","fontBold","pages","spec","page","value","fillAcroFormByName","mapFieldNameToKey","pdfFieldMapper","acroFields","f","name","key","val","s","getPdfMeta","first","size","fillPdfAuto","explicitLayout","getLayoutFor","meta","buildMM109PDF","summary","pdfDoc","draw","text","x","y","bold","color","pole","span","attach","profile","line","label","_j","notes","buildCSXPDF","patterns","p"],"ignoreList":[],"sources":["../../src/utils/permitSummary.js","../../src/utils/pdfFormFiller.js","../../src/utils/permits.js","../../src/utils/pdfFieldMapper.js"],"sourcesContent":["// targets helpers inlined for summary to minimize coupling\n\n/**\n * Build a permit summary object from core inputs.\n * @param {object} params\n * @param {'wvHighway'|'railroad'|string} params.env\n * @param {object} params.results - computeAnalysis results\n * @param {object} params.job - current job object\n * @param {object} params.effectiveProfile - merged submission profile\n * @param {Array} params.cachedMidspans - store.cachedMidspans\n * @param {object} params.store - minimal fields for metadata (optional)\n */\nexport function makePermitSummary({\n  env,\n  results,\n  job,\n  effectiveProfile,\n  cachedMidspans,\n  store,\n}) {\n  if (!results) throw new Error(\"results required\");\n  const type =\n    env === \"railroad\"\n      ? \"CSX Railroad Crossing\"\n      : env === \"wvHighway\"\n        ? \"WVDOH MM109\"\n        : \"General\";\n  // Prefer cached midspans. If none available, treat target as computed (results.clearances)\n  const cacheForEnv = (\n    Array.isArray(cachedMidspans) ? cachedMidspans : []\n  ).filter((m) => (m?.environment || \"\") === env);\n  const targetNumbers = cacheForEnv\n    .map((m) => Number(m?.targetFt))\n    .filter((v) => Number.isFinite(v));\n  const controllingEnvTarget = targetNumbers.length\n    ? Math.max(...targetNumbers)\n    : null;\n  const targetSource = targetNumbers.length ? \"cachedMidspans\" : \"computed\";\n  const controllingEntry = targetNumbers.length\n    ? cacheForEnv.reduce(\n        (best, m) =>\n          Number(m?.targetFt) > Number(best?.targetFt || -Infinity) ? m : best,\n        null,\n      )\n    : null;\n  return {\n    type,\n    job: {\n      id: job?.id || \"\",\n      name: job?.name || store?.projectName || \"\",\n      applicant: job?.applicantName || store?.applicantName || \"\",\n      jobNumber: job?.jobNumber || store?.jobNumber || \"\",\n      owner: job?.jobOwner || store?.jobOwner || \"\",\n      commCompany: job?.commCompany || \"\",\n      submissionProfileName: job?.submissionProfileName || \"\",\n    },\n    profile: { ...effectiveProfile },\n    environment: env,\n    pole: {\n      heightFt: Number(store?.poleHeight) || 0,\n      class: store?.poleClass || \"\",\n      gps: { lat: store?.poleLatitude || \"\", lon: store?.poleLongitude || \"\" },\n    },\n    power: {\n      voltage: store?.existingPowerVoltage,\n      heightFt: store?.existingPowerHeight,\n    },\n    span: {\n      lengthFt: results.span?.spanFt,\n      midspanFt: results.span?.midspanFt,\n      targetFt:\n        controllingEnvTarget != null\n          ? controllingEnvTarget\n          : results.clearances?.groundClearance,\n      computedGroundClearanceFt: results.clearances?.groundClearance,\n      targetSource,\n      // Geospatial midspan (from cached controlling entry when available)\n      midLatitude: controllingEntry?.midLat || \"\",\n      midLongitude: controllingEntry?.midLon || \"\",\n      endpoints: {\n        from: controllingEntry?.fromId\n          ? {\n              id: controllingEntry.fromId,\n              latitude: controllingEntry?.fromLat || \"\",\n              longitude: controllingEntry?.fromLon || \"\",\n            }\n          : null,\n        to: controllingEntry?.toId\n          ? {\n              id: controllingEntry.toId,\n              latitude: controllingEntry?.toLat || \"\",\n              longitude: controllingEntry?.toLon || \"\",\n            }\n          : null,\n      },\n    },\n    attach: {\n      proposedFt: results.attach?.proposedAttachFt,\n      basis: results.attach?.recommendation?.basis,\n      detail: results.attach?.recommendation?.detail,\n    },\n    timestamps: { generatedAt: new Date().toISOString() },\n  };\n}\n","// Lightweight PDF form filler using pdf-lib for text-only fields.\n// Note: Official forms often have complex AcroForms or require ePermitting; we\n// provide a generic text overlay approach to assist transcribing fields.\n\n// Overlay text values at absolute coordinates.\nexport async function fillPdfWithFields(basePdfBytes, fields, layout) {\n  // layout: [{ key, x, y, size?, pageIndex?, bold? }]\n  const { loadPdfLib } = await import(\"./pdfAsync\");\n  const { PDFDocument, StandardFonts, rgb } = await loadPdfLib();\n  const doc = await PDFDocument.load(basePdfBytes);\n  const font = await doc.embedFont(StandardFonts.Helvetica);\n  const fontBold = await doc.embedFont(StandardFonts.HelveticaBold);\n  const pages = doc.getPages();\n  for (const spec of layout || []) {\n    const page = pages[spec.pageIndex || 0];\n    if (!page) continue;\n    const value = fields[spec.key];\n    if (value == null || value === \"\") continue;\n    page.drawText(String(value), {\n      x: spec.x,\n      y: spec.y,\n      size: spec.size || 10,\n      color: rgb(0, 0, 0),\n      font: spec.bold ? fontBold : font,\n    });\n  }\n  return await doc.save();\n}\n\n// Fill AcroForm fields by name using normalized fields and a field name mapper.\n// This works when the official PDF is a fillable form.\nexport async function fillAcroFormByName(basePdfBytes, env, fields) {\n  const { loadPdfLib } = await import(\"./pdfAsync\");\n  const { PDFDocument } = await loadPdfLib();\n  const { mapFieldNameToKey } = await import(\"./pdfFieldMapper\");\n  const doc = await PDFDocument.load(basePdfBytes);\n  const form = doc.getForm();\n  const acroFields = form.getFields();\n  for (const f of acroFields) {\n    try {\n      const name = f.getName();\n      const key = mapFieldNameToKey(name, env);\n      if (!key) continue;\n      const val = fields[key];\n      if (val == null || val === \"\") continue;\n      const s = String(val);\n      if (f.setText) f.setText(s);\n    } catch {\n      // ignore single-field errors to keep bulk fill robust\n    }\n  }\n  return await doc.save();\n}\n\n// Lightweight PDF meta reader for layout selection\nexport async function getPdfMeta(basePdfBytes) {\n  const { loadPdfLib } = await import(\"./pdfAsync\");\n  const { PDFDocument } = await loadPdfLib();\n  const doc = await PDFDocument.load(basePdfBytes);\n  const pages = doc.getPages();\n  const first = pages[0];\n  const size = first ? first.getSize() : { width: 0, height: 0 };\n  return {\n    pages: pages.length,\n    firstPage: { width: size.width, height: size.height },\n  };\n}\n\n// Convenience: auto-pick a layout for an environment if none provided\nexport async function fillPdfAuto(basePdfBytes, env, fields, explicitLayout) {\n  let layout = explicitLayout;\n  if (!layout || !layout.length) {\n    const { getLayoutFor } = await import(\"./pdfLayouts\");\n    const meta = await getPdfMeta(basePdfBytes);\n    layout = getLayoutFor(env, meta);\n  }\n  return fillPdfWithFields(basePdfBytes, fields, layout);\n}\n\nexport default {\n  fillPdfWithFields,\n  fillAcroFormByName,\n  getPdfMeta,\n  fillPdfAuto,\n};\n","// Simple permit PDF builders using pdf-lib\n// These produce lightweight, draft PDFs with key fields from the permit summary.\n\n// Note: We avoid embedding agency-owned form templates. These drafts help populate data\n// and can be transcribed to official forms.\n\nimport { loadPdfLib } from \"./pdfAsync.js\";\n\nexport async function buildMM109PDF(summary) {\n  const { PDFDocument, StandardFonts, rgb } = await loadPdfLib();\n  const pdfDoc = await PDFDocument.create();\n  const page = pdfDoc.addPage([612, 792]); // Letter\n  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);\n  const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\n  const draw = (text, x, y, bold = false, size = 12, color = rgb(0, 0, 0)) => {\n    page.drawText(String(text ?? \"\"), {\n      x,\n      y,\n      size,\n      font: bold ? fontBold : font,\n      color,\n    });\n  };\n\n  // Header\n  draw(\"WV DOH MM-109 Application (Draft)\", 50, 750, true, 18);\n  draw(\n    `Generated: ${new Date().toLocaleString()}`,\n    50,\n    730,\n    false,\n    10,\n    rgb(0.2, 0.2, 0.2),\n  );\n\n  const job = summary.job || {};\n  const pole = summary.pole || {};\n  const span = summary.span || {};\n  const attach = summary.attach || {};\n  const profile = summary.profile || {};\n\n  let y = 700;\n  const line = (label, value) => {\n    draw(label, 50, y, true);\n    draw(String(value ?? \"\"), 220, y);\n    y -= 18;\n  };\n\n  line(\"Applicant/Company:\", job.applicant || \"\");\n  line(\"Communications Co.:\", job.commCompany || \"\");\n  line(\"Job Name:\", job.name || \"\");\n  line(\"Job #:\", job.jobNumber || \"\");\n  line(\"Owner (Utility):\", job.owner || \"\");\n  line(\"Environment:\", summary.environment || \"\");\n  line(\"Submission Profile:\", profile?.label || profile?.name || \"\");\n  line(\"Manifest Type:\", profile?.manifestType || \"\");\n  y -= 6;\n  draw(\"Location\", 50, y, true);\n  y -= 16;\n  line(\"Pole Latitude:\", pole.gps?.lat || \"\");\n  line(\"Pole Longitude:\", pole.gps?.lon || \"\");\n  line(\"Pole Height (ft):\", pole.heightFt ?? \"\");\n  line(\"Pole Class:\", pole.class || \"\");\n  line(\"Power (voltage):\", summary.power?.voltage || \"\");\n  line(\"Power Height:\", summary.power?.heightFt || \"\");\n  y -= 6;\n  draw(\"Span\", 50, y, true);\n  y -= 16;\n  line(\"Span Length (ft):\", span.lengthFt ?? \"\");\n  line(\"Target Ground Clearance (ft):\", span.targetFt ?? \"\");\n  line(\"Computed Ground Clearance (ft):\", span.computedGroundClearanceFt ?? \"\");\n  line(\"Midspan (ft):\", span.midspanFt ?? \"\");\n  line(\"Target Source:\", span.targetSource || \"\");\n  y -= 6;\n  draw(\"Attachment\", 50, y, true);\n  y -= 16;\n  line(\"Proposed Attach (ft):\", attach.proposedFt ?? \"\");\n  line(\"Basis:\", attach.basis || \"\");\n  line(\"Detail:\", attach.detail || \"\");\n\n  // Notes\n  y -= 10;\n  draw(\"Notes:\", 50, y, true);\n  y -= 16;\n  const notes = [\n    \"This draft contains calculated values and job metadata to assist with MM-109 preparation.\",\n    \"For Interstate crossings (new), ensure minimum 21 ft clearance is satisfied (profile configurable).\",\n    \"Validate location and attach heights against field conditions and owner requirements before submission.\",\n  ];\n  for (const n of notes) {\n    draw(`• ${n}`, 60, y);\n    y -= 14;\n  }\n\n  const pdfBytes = await pdfDoc.save();\n  return pdfBytes;\n}\n\nexport async function buildCSXPDF(summary) {\n  const { PDFDocument, StandardFonts, rgb } = await loadPdfLib();\n  const pdfDoc = await PDFDocument.create();\n  const page = pdfDoc.addPage([612, 792]); // Letter\n  const font = await pdfDoc.embedFont(StandardFonts.Helvetica);\n  const fontBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\n  const draw = (text, x, y, bold = false, size = 12, color = rgb(0, 0, 0)) => {\n    page.drawText(String(text ?? \"\"), {\n      x,\n      y,\n      size,\n      font: bold ? fontBold : font,\n      color,\n    });\n  };\n\n  // Header\n  draw(\"Railroad Crossing Application (Draft: CSX)\", 50, 750, true, 18);\n  draw(\n    `Generated: ${new Date().toLocaleString()}`,\n    50,\n    730,\n    false,\n    10,\n    rgb(0.2, 0.2, 0.2),\n  );\n\n  const job = summary.job || {};\n  const pole = summary.pole || {};\n  const span = summary.span || {};\n  const attach = summary.attach || {};\n  const profile = summary.profile || {};\n\n  let y = 700;\n  const line = (label, value) => {\n    draw(label, 50, y, true);\n    draw(String(value ?? \"\"), 260, y);\n    y -= 18;\n  };\n\n  line(\"Applicant/Company:\", job.applicant || \"\");\n  line(\"Communications Co.:\", job.commCompany || \"\");\n  line(\"Job Name:\", job.name || \"\");\n  line(\"Job #:\", job.jobNumber || \"\");\n  line(\"Owner (Utility):\", job.owner || \"\");\n  line(\"Environment:\", summary.environment || \"\");\n  line(\"Submission Profile:\", profile?.label || profile?.name || \"\");\n  line(\"Manifest Type:\", profile?.manifestType || \"\");\n  y -= 6;\n  draw(\"Location\", 50, y, true);\n  y -= 16;\n  line(\"Pole Latitude:\", pole.gps?.lat || \"\");\n  line(\"Pole Longitude:\", pole.gps?.lon || \"\");\n  line(\"Pole Height (ft):\", pole.heightFt ?? \"\");\n  line(\"Pole Class:\", pole.class || \"\");\n  line(\"Power (voltage):\", summary.power?.voltage || \"\");\n  line(\"Power Height:\", summary.power?.heightFt || \"\");\n  y -= 6;\n  draw(\"Span\", 50, y, true);\n  y -= 16;\n  line(\"Span Length (ft):\", span.lengthFt ?? \"\");\n  line(\"Target Ground Clearance (ft):\", span.targetFt ?? \"\");\n  line(\"Computed Ground Clearance (ft):\", span.computedGroundClearanceFt ?? \"\");\n  line(\"Midspan (ft):\", span.midspanFt ?? \"\");\n  line(\"Target Source:\", span.targetSource || \"\");\n  y -= 6;\n  draw(\"Attachment\", 50, y, true);\n  y -= 16;\n  line(\"Proposed Attach (ft):\", attach.proposedFt ?? \"\");\n  line(\"Basis:\", attach.basis || \"\");\n  line(\"Detail:\", attach.detail || \"\");\n\n  // Notes\n  y -= 10;\n  draw(\"Notes:\", 50, y, true);\n  y -= 16;\n  const notes = [\n    \"Target ground clearance for railroad crossings is typically 27 ft (profile configurable).\",\n    \"Ensure vertical and horizontal clearances meet railroad standards and owner requirements.\",\n    \"Provide plan/profile drawing, location map, and contact information with the official submittal.\",\n  ];\n  for (const n of notes) {\n    draw(`• ${n}`, 60, y);\n    y -= 14;\n  }\n\n  const pdfBytes = await pdfDoc.save();\n  return pdfBytes;\n}\n","// Map PDF AcroForm field names to normalized keys used by our fields.json\n// Heuristic patterns cover common variants. Env can bias ambiguous matches.\n\nconst patterns = [\n  {\n    re: /applicant|applicant[_\\s-]*name|owner[_\\s-]*name|company[_\\s-]*name/i,\n    key: \"applicant\",\n  },\n  { re: /project|job[_\\s-]*name|work[_\\s-]*description/i, key: \"jobName\" },\n  { re: /job[_\\s-]*no|job[_\\s-]*number|permit[_\\s-]*no/i, key: \"jobNumber\" },\n  { re: /latitude|lat\\b/i, key: \"poleLatitude\" },\n  { re: /longitude|lon\\b|long\\b/i, key: \"poleLongitude\" },\n  // Midspan and endpoint coordinates\n  { re: /mid[_\\s-]*span[_\\s-]*lat|midpoint[_\\s-]*lat/i, key: \"midLatitude\" },\n  {\n    re: /mid[_\\s-]*span[_\\s-]*lon|mid[_\\s-]*span[_\\s-]*long|midpoint[_\\s-]*lon|midpoint[_\\s-]*long/i,\n    key: \"midLongitude\",\n  },\n  { re: /from[_\\s-]*(pole)?[_\\s-]*id/i, key: \"fromPoleId\" },\n  { re: /to[_\\s-]*(pole)?[_\\s-]*id/i, key: \"toPoleId\" },\n  { re: /from[_\\s-]*lat/i, key: \"fromLatitude\" },\n  { re: /from[_\\s-]*lon|from[_\\s-]*long/i, key: \"fromLongitude\" },\n  { re: /to[_\\s-]*lat/i, key: \"toLatitude\" },\n  { re: /to[_\\s-]*lon|to[_\\s-]*long/i, key: \"toLongitude\" },\n  { re: /contact|phone|tel/i, key: \"contactPhone\" },\n  { re: /email/i, key: \"contactEmail\" },\n  {\n    re: /clearance|vertical[_\\s-]*clearance|ground[_\\s-]*clearance/i,\n    key: \"targetGroundClearanceFt\",\n  },\n  { re: /span[_\\s-]*length|length[_\\s-]*of[_\\s-]*span/i, key: \"spanLengthFt\" },\n  { re: /mid[_\\s-]*span|midspan/i, key: \"midspanFt\" },\n  {\n    re: /attach|proposed[_\\s-]*attach|attachment[_\\s-]*height/i,\n    key: \"proposedAttachFt\",\n  },\n  { re: /owner|utility[_\\s-]*owner/i, key: \"owner\" },\n  {\n    re: /company|communications[_\\s-]*company|comm[_\\s-]*company/i,\n    key: \"commCompany\",\n  },\n  { re: /route|road|highway/i, key: \"route\" },\n];\n\nexport function mapFieldNameToKey(name, env) {\n  if (!name) return null;\n  for (const p of patterns) {\n    if (p.re.test(String(name))) return p.key;\n  }\n  // Env-specific biases can be added here, e.g., MM-109 known names\n  if (env === \"wvHighway\") {\n    const s = String(name).toLowerCase();\n    if (s.includes(\"mm-109\") && s.includes(\"applicant\")) return \"applicant\";\n  }\n  return null;\n}\n\nexport default { mapFieldNameToKey };\n"],"file":"assets/app-permits-Dftu4pdj.js"}
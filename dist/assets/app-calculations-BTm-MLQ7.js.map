{"version":3,"file":"app-calculations-BTm-MLQ7.js","sources":["../../src/utils/calculations.js"],"sourcesContent":["// Core math helpers (deduplicated)\nexport function clamp(value, min, max) {\n  if (Number.isNaN(value)) return min;\n  return Math.min(max, Math.max(min, value));\n}\nexport function degToRad(deg) {\n  return (deg * Math.PI) / 180;\n}\nexport function radToDeg(rad) {\n  return (rad * 180) / Math.PI;\n}\nexport function normalizeBearingDeg(bearing) {\n  let b = bearing % 360;\n  if (b < 0) b += 360;\n  return b;\n}\n\nexport function normalizeIncludedAngleDeg(bearingA, bearingB) {\n  // θ = min(|Δbearing|, 360 - |Δbearing|), clamped [0, 180]\n  const a = normalizeBearingDeg(bearingA);\n  const b = normalizeBearingDeg(bearingB);\n  const delta = Math.abs(a - b);\n  const theta = Math.min(delta, 360 - delta);\n  return clamp(theta, 0, 180);\n}\n\nexport function pullFromAngleDeg(thetaDeg, baseSpanFt = 100) {\n  const theta = clamp(thetaDeg, 0, 180);\n  const pull = baseSpanFt * Math.sin(degToRad(theta / 2));\n  return clamp(pull, 0, baseSpanFt);\n}\nexport function angleDegFromPull(pullFt, baseSpanFt = 100) {\n  const p = clamp(pullFt, 0, baseSpanFt);\n  const ratio = p / baseSpanFt;\n  const thetaRad = 2 * Math.asin(ratio);\n  return clamp(radToDeg(thetaRad), 0, 180);\n}\nexport function computePullAutofill({\n  incomingBearingDeg,\n  outgoingBearingDeg,\n  baseSpanFt = 100,\n}) {\n  const theta = normalizeIncludedAngleDeg(\n    incomingBearingDeg,\n    outgoingBearingDeg,\n  );\n  const pullFt = pullFromAngleDeg(theta, baseSpanFt);\n  return { thetaDeg: theta, pullFt };\n}\nexport const examples = {\n  zero: pullFromAngleDeg(0),\n  sixty: pullFromAngleDeg(60),\n  oneTwenty: pullFromAngleDeg(120),\n  oneEighty: pullFromAngleDeg(180),\n};\n// Unified calculations utility (ES module) with ft/in parsing & formatting\n\n// ---------- formatting helpers ----------\nexport function parseFeet(value) {\n  if (value == null) return null;\n  if (typeof value === \"number\" && !Number.isNaN(value)) return value;\n  const s = String(value).trim().toLowerCase();\n  if (s === \"\") return null;\n\n  // inches only patterns: 10\", 10'', 10in\n  const inchesOnly = s.match(/^(\\d+(?:\\.\\d+)?)\\s*(?:\"\"|\"|in)$/i);\n  if (inchesOnly) return (parseFloat(inchesOnly[1]) || 0) / 12;\n\n  // feet only patterns: 15', 15ft\n  const feetOnly = s.match(/^(\\d+(?:\\.\\d+)?)\\s*(?:'|ft)$/i);\n  if (feetOnly) return parseFloat(feetOnly[1]) || 0;\n\n  // feet and inches patterns: 35'6\", 35' 6\", 35ft 6in, 35 ft 6 in\n  const ftInMatch = s.match(\n    /^(\\d+(?:\\.\\d+)?)\\s*(?:'|ft)\\s*(\\d+(?:\\.\\d+)?)\\s*(?:\"\"|\"|in)?$/i,\n  );\n  if (ftInMatch) {\n    const ft = parseFloat(ftInMatch[1]) || 0;\n    const inch = parseFloat(ftInMatch[2] ?? \"0\") || 0;\n    return ft + inch / 12;\n  }\n\n  // fallback to plain number (assume feet)\n  const n = Number(s.replace(/[^0-9.-]/g, \"\"));\n  return Number.isFinite(n) ? n : null;\n}\n\nexport function formatFeetInches(\n  feet,\n  { compact = false, tickMarks = false } = {},\n) {\n  if (feet == null || Number.isNaN(feet)) return \"--\";\n  const isNeg = feet < 0;\n  const abs = Math.abs(feet);\n  let ft = Math.floor(abs);\n  let inch = Math.round((abs - ft) * 12);\n  if (inch === 12) {\n    ft += 1;\n    inch = 0;\n  }\n  const sign = isNeg ? \"-\" : \"\";\n\n  if (tickMarks) {\n    return compact ? `${sign}${ft}' ${inch}\"` : `${sign}${ft}' ${inch}\"`;\n  } else {\n    return compact ? `${sign}${ft}' ${inch}\"` : `${sign}${ft}ft ${inch}in`;\n  }\n}\n\n// Additional formatting function specifically for tick marks\nexport function formatFeetInchesTickMarks(feet) {\n  if (feet == null || Number.isNaN(feet)) return \"--\";\n  const isNeg = feet < 0;\n  const abs = Math.abs(feet);\n  let ft = Math.floor(abs);\n  let inch = Math.round((abs - ft) * 12);\n  if (inch === 12) {\n    ft += 1;\n    inch = 0;\n  }\n  const sign = isNeg ? \"-\" : \"\";\n  return `${sign}${ft}' ${inch}\"`;\n}\n\n// Additional formatting function specifically for verbose format\nexport function formatFeetInchesVerbose(feet) {\n  if (feet == null || Number.isNaN(feet)) return \"--\";\n  const isNeg = feet < 0;\n  const abs = Math.abs(feet);\n  let ft = Math.floor(abs);\n  let inch = Math.round((abs - ft) * 12);\n  if (inch === 12) {\n    ft += 1;\n    inch = 0;\n  }\n  const sign = isNeg ? \"-\" : \"\";\n  return `${sign}${ft}ft ${inch}in`;\n}\n\n// ---------- defaults ----------\nexport const DEFAULTS = {\n  cableTypes: [\n    {\n      label: 'ADSS (0.5\")',\n      value: \"adss\",\n      weight: 0.08,\n      tension: 1200,\n      diameter: 0.5,\n    },\n    {\n      label: 'Coax (0.75\")',\n      value: \"coax\",\n      weight: 0.12,\n      tension: 1500,\n      diameter: 0.75,\n    },\n    {\n      label: 'Copper (0.5\")',\n      value: \"copper\",\n      weight: 0.1,\n      tension: 1400,\n      diameter: 0.5,\n    },\n    {\n      label: 'Triplex (1.0\")',\n      value: \"triplex\",\n      weight: 0.2,\n      tension: 1800,\n      diameter: 1.0,\n    },\n    {\n      label: 'Generic Comm (0.6\")',\n      value: \"communication\",\n      weight: 0.1,\n      tension: 1400,\n      diameter: 0.6,\n    },\n    {\n      label: 'Messenger-lashed Fiber (0.6\")',\n      value: \"messenger_fiber\",\n      weight: 0.14,\n      tension: 1600,\n      diameter: 0.6,\n    },\n    {\n      label: 'Overlash on Existing Messenger (0.6\")',\n      value: \"overlash\",\n      weight: 0.18,\n      tension: 1800,\n      diameter: 0.6,\n    },\n  ],\n  presets: {\n    firstEnergy: {\n      label: \"FirstEnergy\",\n      value: \"firstEnergy\",\n      voltage: \"distribution\",\n      minTopSpace: 2.0,\n      roadClearance: 18.0,\n      commToPower: 44 / 12,\n      asBuiltTolerances: { attachHeightIn: 2 },\n    },\n    firstEnergyMonPower: {\n      label: \"FirstEnergy - Mon Power\",\n      value: \"firstEnergyMonPower\",\n      voltage: \"distribution\",\n      minTopSpace: 2.0,\n      roadClearance: 18.0,\n      commToPower: 44 / 12,\n      asBuiltTolerances: { attachHeightIn: 2 },\n    },\n    pse: {\n      label: \"PSE\",\n      value: \"pse\",\n      voltage: \"distribution\",\n      minTopSpace: 2.0,\n      roadClearance: 18.0,\n      commToPower: 42 / 12,\n      asBuiltTolerances: { attachHeightIn: 4 },\n    },\n    duke: {\n      label: \"Duke\",\n      value: \"duke\",\n      voltage: \"distribution\",\n      minTopSpace: 2.0,\n      roadClearance: 18.0,\n      commToPower: 40 / 12,\n      asBuiltTolerances: { attachHeightIn: 4 },\n    },\n    nationalGrid: {\n      label: \"National Grid\",\n      value: \"nationalGrid\",\n      voltage: \"distribution\",\n      minTopSpace: 2.0,\n      roadClearance: 18.0,\n      commToPower: 40 / 12,\n      asBuiltTolerances: { attachHeightIn: 4 },\n    },\n  },\n};\n\n// FirstEnergy family owner name hints for detection (case-insensitive substring match)\nexport const FIRST_ENERGY_OWNER_HINTS = [\n  \"firstenergy\",\n  \"mon power\",\n  \"monpower\",\n  \"penelec\",\n  \"potomac edison\",\n  \"west penn power\",\n  \"jcp&l\",\n  \"jersey central power\",\n  \"ohio edison\",\n  \"illuminating company\",\n  \"toledo edison\",\n];\n\n// ---------- core calcs ----------\nexport function getNESCClearances(\n  voltage = \"communication\",\n  environment = \"road\",\n) {\n  const clearances = {\n    communication: {\n      groundClearance: environment === \"road\" ? 15.5 : 9.5,\n      roadClearance: 18.0,\n      powerClearanceDistribution: 40 / 12,\n      powerClearanceTransmission: 6.0,\n      minimumPoleTopSpace: 1.0,\n      commToCommVertical: 1.0,\n      commToCommMidspan: 0.5,\n      neutralClearance: 20 / 12,\n      dropWireClearance: 6 / 12,\n    },\n    distribution: {\n      groundClearance: environment === \"road\" ? 23.0 : 18.0,\n      roadClearance: 25.0,\n      powerClearanceDistribution: 0,\n      powerClearanceTransmission: 4.0,\n      minimumPoleTopSpace: 2.0,\n    },\n    transmission: {\n      groundClearance: environment === \"road\" ? 28.5 : 23.0,\n      roadClearance: 30.0,\n      powerClearanceDistribution: 0,\n      powerClearanceTransmission: 6.0,\n      minimumPoleTopSpace: 4.0,\n    },\n  };\n  return clearances[voltage] || clearances.communication;\n}\n\nexport function applyPresetToClearances(clearances, presetKey) {\n  if (!presetKey) return clearances;\n  const preset = DEFAULTS.presets[presetKey];\n  if (!preset) return clearances;\n  const updated = { ...clearances };\n  if (typeof preset.minTopSpace === \"number\")\n    updated.minimumPoleTopSpace = preset.minTopSpace;\n  if (typeof preset.roadClearance === \"number\")\n    updated.roadClearance = preset.roadClearance;\n  if (typeof preset.commToPower === \"number\")\n    updated.powerClearanceDistribution = preset.commToPower;\n  return updated;\n}\n\nexport function applyPresetObject(clearances, presetObj) {\n  if (!presetObj) return clearances;\n  const updated = { ...clearances };\n  if (typeof presetObj.minTopSpace === \"number\")\n    updated.minimumPoleTopSpace = presetObj.minTopSpace;\n  if (typeof presetObj.roadClearance === \"number\")\n    updated.roadClearance = presetObj.roadClearance;\n  if (typeof presetObj.commToPower === \"number\")\n    updated.powerClearanceDistribution = presetObj.commToPower;\n  return updated;\n}\n\nexport function resultsToCSV(\n  results,\n  warnings = [],\n  makeReadyNotes = \"\",\n  { useTickMarks = false } = {},\n) {\n  if (!results) return \"\";\n  const lines = [];\n  const fmt = useTickMarks ? formatFeetInchesTickMarks : formatFeetInches;\n\n  lines.push(\"Section,Field,Value\");\n  lines.push(`Pole,Height,${fmt(results.pole.inputHeight)}`);\n  lines.push(`Pole,Buried,${fmt(results.pole.buriedFt)}`);\n  lines.push(`Pole,Above Ground,${fmt(results.pole.aboveGroundFt)}`);\n  if (results.pole.latitude != null && results.pole.longitude != null) {\n    lines.push(`Pole,Latitude,${results.pole.latitude}`);\n    lines.push(`Pole,Longitude,${results.pole.longitude}`);\n  }\n  lines.push(\n    `Attach,Proposed,${useTickMarks ? formatFeetInchesTickMarks(results.attach.proposedAttachFt) : results.attach.proposedAttachFmt}`,\n  );\n  if (results.attach?.recommendation) {\n    lines.push(`Attach,Rule Basis,${results.attach.recommendation.basis}`);\n    lines.push(`Attach,Rule Detail,${results.attach.recommendation.detail}`);\n    if (results.attach.recommendation.clearanceIn != null)\n      lines.push(\n        `Attach,Owner Clearance (in),${results.attach.recommendation.clearanceIn}`,\n      );\n  }\n  lines.push(`Span,Length,${results.span.spanFt} ft`);\n  lines.push(`Span,Wind,${results.span.wind} mph`);\n  lines.push(\n    `Span,Sag,${useTickMarks ? formatFeetInchesTickMarks(results.span.sagFt) : results.span.sagFmt}`,\n  );\n  lines.push(\n    `Span,Midspan,${useTickMarks ? formatFeetInchesTickMarks(results.span.midspanFt) : results.span.midspanFmt}`,\n  );\n  lines.push(\n    `Clearances,Ground Target,${fmt(results.clearances.groundClearance)}`,\n  );\n  lines.push(`Clearances,Road Target,${fmt(results.clearances.roadClearance)}`);\n  if (results.makeReadyTotal != null)\n    lines.push(`Make-ready,Total,$${results.makeReadyTotal}`);\n  if (results.guy) {\n    lines.push(`Guying,Required,${results.guy.required ? \"Yes\" : \"No\"}`);\n    lines.push(`Guying,Tension,${Math.round(results.guy.tension || 0)} lb`);\n    lines.push(`Guying,Angle,${Math.round(results.guy.angle || 0)} deg`);\n  }\n  if (warnings?.length) lines.push(`Warnings,Count,${warnings.length}`);\n  if (makeReadyNotes)\n    lines.push(`Notes,Make-ready,\"${makeReadyNotes.replace(/\"/g, '\"\"')}\"`);\n  return lines.join(\"\\n\");\n}\n\nexport function getPoleBurialData(height, poleClass = \"\") {\n  const h = Number(height) || 0;\n  const buried = Math.max(5, h * 0.1 + 2);\n  const aboveGround = Math.max(0, h - buried);\n  const recommendedClass =\n    h <= 30\n      ? \"Class 6 typical\"\n      : h <= 35\n        ? \"Class 4-5 typical\"\n        : h <= 40\n          ? \"Class 3-4 typical\"\n          : h <= 45\n            ? \"Class 2-3 typical\"\n            : \"Class 1-2 typical\";\n  const classInfo = poleClass || recommendedClass;\n  return { buried, aboveGround, classInfo, recommendedClass };\n}\n\nexport function calculateSag(\n  spanFt,\n  weightLbsPerFt,\n  tensionLbs,\n  windSpeedMph = 90,\n  cableDiameterIn = 0.5,\n  iceThicknessIn = 0,\n) {\n  const L = Number(spanFt) || 0;\n  const T = Math.max(1, Number(tensionLbs) || 1200);\n  const dFt =\n    Math.max(\n      0,\n      (Number(cableDiameterIn) || 0.5) + 2 * (Number(iceThicknessIn) || 0),\n    ) / 12;\n  const wVert = Math.max(0, Number(weightLbsPerFt) || 0.1); // lb/ft\n  const qWind = 0.00256 * Math.pow(Math.max(0, Number(windSpeedMph) || 0), 2);\n  const wHoriz = qWind * dFt; // lb/ft projected\n  const wEff = Math.sqrt(wVert * wVert + wHoriz * wHoriz);\n  const sag = (wEff * L * L) / (8 * T); // ft\n  return sag;\n}\n\nexport function calculateDownGuy(\n  poleAboveGroundFt,\n  attachmentHeightFt,\n  cableData,\n  spanLengthFt,\n  windSpeedMph = 90,\n  pullDirectionDeg = 0,\n) {\n  if (!cableData || !spanLengthFt || !attachmentHeightFt) return null;\n  const leverArm = Number(attachmentHeightFt) || 0;\n  const span = Number(spanLengthFt) || 0;\n  const wind = Number(windSpeedMph) || 0;\n  const T = cableData.tension || 1500;\n  const windPressure =\n    0.00256 * Math.pow(wind, 2) * ((cableData.diameter || 0.6) / 12);\n  const windLoadOnSpan = windPressure * span;\n  const horizontalLoad = T * 0.1 + windLoadOnSpan; // approx unbalanced + wind\n  const guyAttach = Math.max(1, Number(poleAboveGroundFt) || 1) * 0.85;\n  const leadDistance = guyAttach * 0.5; // typical lead\n  const guyTension = (horizontalLoad * leverArm) / Math.max(1, guyAttach);\n  const guyAngle =\n    Math.atan(guyAttach / Math.max(0.1, leadDistance)) * (180 / Math.PI);\n  const required = guyTension > 500;\n  const totalCost = required\n    ? 350 + Math.min(650, Math.round(guyTension / 10))\n    : 0;\n  return {\n    required,\n    tension: guyTension,\n    angle: guyAngle,\n    leadDistance,\n    guyHeight: guyAttach,\n    pullDirection: pullDirectionDeg,\n    totalCost,\n  };\n}\n\nexport function analyzeMakeReadyImpact(\n  existingFt,\n  proposedFt,\n  minSeparationFt,\n) {\n  const existing = Number(existingFt);\n  const proposed = Number(proposedFt);\n  const minSep = Number(minSeparationFt);\n  if (\n    !Number.isFinite(existing) ||\n    !Number.isFinite(proposed) ||\n    !Number.isFinite(minSep)\n  )\n    return null;\n  const actualSep = Math.abs(existing - proposed);\n  const makeReadyRequired = actualSep < minSep;\n  const adjustmentNeeded = makeReadyRequired ? minSep - actualSep : 0;\n  return {\n    makeReadyRequired,\n    adjustmentNeeded,\n    recommendedHeight: makeReadyRequired ? existing - minSep : proposed,\n  };\n}\n\nexport function recommendPoleReplacement(poleHeightFt, requiredAboveGroundFt) {\n  const h = Number(poleHeightFt) || 0;\n  const req = Number(requiredAboveGroundFt) || 0;\n  const margin = h - req;\n  const replace = margin < 2; // if less than 2ft margin, recommend replacement\n  const suggested = replace ? Math.ceil(req + 4) : h;\n  return { replace, suggestedHeight: suggested };\n}\n\n// FirstEnergy / utility requirements used by the UI export\nexport function getFirstEnergyRequirements() {\n  return {\n    applicationRequirements: [\n      \"Pole Attachment Agreement executed\",\n      \"SPANS electronic submission required (max 25 poles per application)\",\n      \"Pole profile for each pole attachment point\",\n      \"Site map with route connectivity shown\",\n      \"High resolution photos taken within 30 days\",\n      \"GPS coordinates required if no visible pole tag\",\n      \"Load analysis required for spans exceeding 250 feet\",\n      \"Engineering drawings for complex attachments\",\n    ],\n    prohibitedItems: [\n      \"Boxing and extension arms not permitted\",\n      \"Additional equipment mounting on pole\",\n      \"Steel transmission structure attachments\",\n      \"Overlashing prohibited in New Jersey territory\",\n      \"Grounding to pole without utility approval\",\n      \"Modifications to existing pole hardware\",\n    ],\n    engineeringChecks: [\n      \"NESC Table 232-1 compliance verification\",\n      \"Pole loading analysis if span > 250ft or guy required\",\n      \"Make-ready construction cost assessment\",\n      \"Ground clearance verification at midspan\",\n      \"Post-construction inspection scheduling\",\n      \"Storm restoration priority classification\",\n    ],\n    makeReadyProcess: [\n      \"Utility performs make-ready work\",\n      \"Attacher pays for make-ready costs\",\n      \"Standard make-ready: $150-300 per attachment point\",\n      \"Complex make-ready: $500-1500 per pole\",\n      \"Timeline: 45-90 days after approval\",\n    ],\n    qualityAssurance: [\n      \"Field verification of pole class and height\",\n      \"Photo documentation of existing conditions\",\n      \"GPS verification within 10 feet of reported coordinates\",\n      \"Clearance measurements using laser rangefinder\",\n      \"As-built documentation within 48 hours of completion\",\n    ],\n    safetyRequirements: [\n      \"Hard hat, safety glasses, and high-visibility vest required\",\n      \"Traffic control plan for roadway work\",\n      \"Minimum approach distances to energized equipment\",\n      \"Lockout/tagout procedures for utility coordination\",\n      \"Fall protection for work above 6 feet\",\n    ],\n  };\n}\n\n// ---------- pure analysis for reuse (UI and batch) ----------\nexport function computeAnalysis(inputs) {\n  const {\n    poleHeight,\n    poleClass,\n    poleLatitude,\n    poleLongitude,\n    adjacentPoleLatitude,\n    adjacentPoleLongitude,\n    existingPowerHeight,\n    existingPowerVoltage = \"distribution\",\n    spanDistance,\n    isNewConstruction,\n    adjacentPoleHeight,\n    adjacentPowerHeight,\n    adjacentProposedAttachFt,\n    attachmentType,\n    cableDiameter,\n    windSpeed,\n    spanEnvironment = \"road\",\n    // streetLightHeight,\n    dripLoopHeight,\n    proposedLineHeight,\n    existingLines = [],\n    iceThicknessIn,\n    hasTransformer,\n    presetProfile,\n    customMinTopSpace,\n    customRoadClearance,\n    customCommToPower,\n    powerReference,\n    jobOwner,\n    submissionProfile,\n  } = inputs || {};\n\n  const errs = {};\n  if (!poleHeight) errs.poleHeight = \"Pole height required for analysis\";\n  if (\n    !isNewConstruction &&\n    !existingPowerHeight &&\n    existingPowerVoltage !== \"communication\"\n  )\n    errs.existingPowerHeight =\n      \"Power wire height required for existing pole analysis\";\n  if (Object.keys(errs).length) return { errors: errs };\n\n  const poleData = getPoleBurialData(Number(poleHeight) || 0, poleClass);\n  const cableData =\n    DEFAULTS.cableTypes.find((c) => c.value === attachmentType) ||\n    DEFAULTS.cableTypes[0];\n  // If span distance missing, try to compute from geolocation (haversine)\n  let spanFt = Number(spanDistance) || 0;\n  if (\n    !spanFt &&\n    Number.isFinite(Number(poleLatitude)) &&\n    Number.isFinite(Number(poleLongitude)) &&\n    Number.isFinite(Number(adjacentPoleLatitude)) &&\n    Number.isFinite(Number(adjacentPoleLongitude))\n  ) {\n    const toRad = (d) => (Number(d) * Math.PI) / 180;\n    const Rm = 6371000;\n    const lat1 = Number(poleLatitude),\n      lon1 = Number(poleLongitude);\n    const lat2 = Number(adjacentPoleLatitude),\n      lon2 = Number(adjacentPoleLongitude);\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a =\n      Math.sin(dLat / 2) ** 2 +\n      Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const meters = Rm * c;\n    spanFt = meters * 3.28084;\n  }\n  const wind = Number(windSpeed) || 90;\n  const adjacentPoleFt = Number(adjacentPoleHeight) || 0;\n  const proposedFt = parseFeet(proposedLineHeight);\n  // streetLightHeight not used in owner rule currently; drip loop governs\n  const dripFt = parseFeet(dripLoopHeight);\n\n  // Determine owner context early so we can influence baseline clearances\n  const companyNamesEarly = (existingLines || [])\n    .map((l) => String(l?.companyName || \"\").toLowerCase())\n    .filter(Boolean);\n  const isFEByPresetEarly =\n    presetProfile === \"firstEnergy\" || presetProfile === \"firstEnergyMonPower\";\n  const isFEByCompanyEarly = companyNamesEarly.some((name) =>\n    FIRST_ENERGY_OWNER_HINTS.some((h) => name.includes(h)),\n  );\n  const jobOwnerLcEarly = String(jobOwner || \"\").toLowerCase();\n  const isFEByJobOwnerEarly = jobOwnerLcEarly\n    ? FIRST_ENERGY_OWNER_HINTS.some((h) => jobOwnerLcEarly.includes(h))\n    : false;\n  const isFirstEnergyOwner =\n    isFEByPresetEarly || isFEByCompanyEarly || isFEByJobOwnerEarly;\n\n  let clearances = getNESCClearances(existingPowerVoltage, spanEnvironment);\n  clearances = applyPresetToClearances(clearances, presetProfile);\n  // Owner-type overrides: if FirstEnergy detected by jobOwner/lines/preset, enforce FE-like parameters\n  if (isFirstEnergyOwner) {\n    // Ensure comm-to-power separation reflects 44\" (unless custom override is supplied later)\n    clearances.powerClearanceDistribution = Math.max(\n      clearances.powerClearanceDistribution || 0,\n      44 / 12,\n    );\n    // Ensure minimum top space at least 2 ft\n    clearances.minimumPoleTopSpace = Math.max(\n      clearances.minimumPoleTopSpace || 0,\n      2.0,\n    );\n    // Road environments: enforce 18 ft ground target minimum\n    if (spanEnvironment === \"road\") {\n      clearances.groundClearance = Math.max(\n        clearances.groundClearance || 0,\n        18.0,\n      );\n    }\n  }\n  // Submission profile overrides (adjustable per utility/region)\n  if (submissionProfile && typeof submissionProfile === \"object\") {\n    const {\n      commToPowerIn,\n      minTopSpaceFt,\n      roadClearanceFt,\n      envRoadFt,\n      envResidentialFt,\n      envPedestrianFt,\n      envFieldFt,\n      envResidentialYardFt,\n      envResidentialDrivewayFt,\n      envNonResidentialDrivewayFt,\n      envWaterwayFt,\n      envWVHighwayFt,\n      envInterstateFt,\n      envInterstateNewCrossingFt,\n      envRailroadFt,\n    } = submissionProfile;\n    if (Number.isFinite(commToPowerIn))\n      clearances.powerClearanceDistribution = Math.max(\n        clearances.powerClearanceDistribution || 0,\n        Number(commToPowerIn) / 12,\n      );\n    if (Number.isFinite(minTopSpaceFt))\n      clearances.minimumPoleTopSpace = Math.max(\n        clearances.minimumPoleTopSpace || 0,\n        Number(minTopSpaceFt),\n      );\n    if (Number.isFinite(roadClearanceFt) && spanEnvironment === \"road\")\n      clearances.groundClearance = Math.max(\n        clearances.groundClearance || 0,\n        Number(roadClearanceFt),\n      );\n    // Environment-specific midspan target overrides\n    if (spanEnvironment === \"road\" && Number.isFinite(envRoadFt))\n      clearances.groundClearance = Number(envRoadFt);\n    if (spanEnvironment === \"residential\" && Number.isFinite(envResidentialFt))\n      clearances.groundClearance = Number(envResidentialFt);\n    if (spanEnvironment === \"pedestrian\" && Number.isFinite(envPedestrianFt))\n      clearances.groundClearance = Number(envPedestrianFt);\n    if (spanEnvironment === \"field\" && Number.isFinite(envFieldFt))\n      clearances.groundClearance = Number(envFieldFt);\n    if (\n      spanEnvironment === \"residentialYard\" &&\n      Number.isFinite(envResidentialYardFt)\n    )\n      clearances.groundClearance = Number(envResidentialYardFt);\n    if (\n      spanEnvironment === \"residentialDriveway\" &&\n      Number.isFinite(envResidentialDrivewayFt)\n    )\n      clearances.groundClearance = Number(envResidentialDrivewayFt);\n    if (spanEnvironment === \"waterway\" && Number.isFinite(envWaterwayFt))\n      clearances.groundClearance = Number(envWaterwayFt);\n    if (spanEnvironment === \"wvHighway\" && Number.isFinite(envWVHighwayFt))\n      clearances.groundClearance = Number(envWVHighwayFt);\n    if (spanEnvironment === \"interstate\" && Number.isFinite(envInterstateFt))\n      clearances.groundClearance = Number(envInterstateFt);\n    if (\n      spanEnvironment === \"interstateNewCrossing\" &&\n      Number.isFinite(envInterstateNewCrossingFt)\n    )\n      clearances.groundClearance = Number(envInterstateNewCrossingFt);\n    if (\n      spanEnvironment === \"nonResidentialDriveway\" &&\n      Number.isFinite(envNonResidentialDrivewayFt)\n    )\n      clearances.groundClearance = Number(envNonResidentialDrivewayFt);\n    if (spanEnvironment === \"railroad\" && Number.isFinite(envRailroadFt))\n      clearances.groundClearance = Number(envRailroadFt);\n    // minCommAttachFt is applied after attach height is computed below\n  }\n  if (customMinTopSpace)\n    clearances.minimumPoleTopSpace =\n      Number(customMinTopSpace) || clearances.minimumPoleTopSpace;\n  if (customRoadClearance)\n    clearances.roadClearance =\n      Number(customRoadClearance) || clearances.roadClearance;\n  if (customCommToPower)\n    clearances.powerClearanceDistribution =\n      Number(customCommToPower) || clearances.powerClearanceDistribution;\n\n  let localWarnings = [];\n  let notes = [];\n  let calculatedCost = 0;\n\n  // Determine controlling power feature height\n\n  const heights = [];\n  const pushIf = (val, name) => {\n    const ft = parseFeet(val);\n    if (ft != null && Number.isFinite(ft) && ft > 0) heights.push({ name, ft });\n  };\n  pushIf(existingPowerHeight, \"power conductor\");\n  pushIf(dripLoopHeight, \"drip loop\");\n  // Scan existing lines for neutral/secondary heights\n  for (const line of existingLines || []) {\n    const t = String(line?.type || \"\").toLowerCase();\n    if (t.includes(\"neutral\")) pushIf(line?.height, \"neutral\");\n    if (t.includes(\"secondary\")) pushIf(line?.height, \"secondary\");\n  }\n  heights.sort((a, b) => a.ft - b.ft);\n  // Owner-selected reference override\n  let controlling = null;\n  const findByName = (n) => heights.find((h) => h.name === n) || null;\n  switch (powerReference || \"auto\") {\n    case \"neutral\":\n      controlling = findByName(\"neutral\");\n      break;\n    case \"secondary\":\n      controlling = findByName(\"secondary\");\n      break;\n    case \"dripLoop\":\n      controlling = findByName(\"drip loop\");\n      break;\n    case \"power\":\n      controlling = findByName(\"power conductor\");\n      break;\n    default:\n      controlling = heights[0] || null;\n      break;\n  }\n  const powerPresent = !!controlling;\n  const hasCommCompany = (existingLines || []).some(\n    (l) =>\n      String(l?.type || \"\")\n        .toLowerCase()\n        .includes(\"communication\") &&\n      String(l?.companyName || \"\").trim().length > 0,\n  );\n  const commOwnerScenario =\n    !powerPresent &&\n    (existingPowerVoltage === \"communication\" || hasCommCompany);\n\n  // Determine effective separation between comm and controlling power-owned element\n  // Base on voltage class: transmission uses transmission separation; distribution uses distribution separation\n  const baseSeparationFt =\n    existingPowerVoltage === \"transmission\"\n      ? clearances.powerClearanceTransmission || 0\n      : clearances.powerClearanceDistribution || 0;\n  const ownerFloorFt =\n    existingPowerVoltage === \"transmission\"\n      ? baseSeparationFt // don't override transmission separation with owner floors\n      : isFirstEnergyOwner\n        ? 44 / 12\n        : 40 / 12;\n  const effectiveSeparationFt = Math.max(baseSeparationFt, ownerFloorFt);\n  const effectiveSeparationInches = Math.round(effectiveSeparationFt * 12);\n\n  let proposedAttachFt = null;\n  let ownerRecommendation = null;\n  if (commOwnerScenario) {\n    proposedAttachFt = Math.max(0, poleData.aboveGround - 1.0);\n    ownerRecommendation = {\n      basis: \"owner-comm/no-power\",\n      detail: \"1ft below pole top (comm owner, no power measurements)\",\n      clearanceIn: 12,\n      controlling: { name: \"pole top\", ft: poleData.aboveGround },\n    };\n    notes.push(\n      \"Owner rule: No power measurements provided and communication company present — setting proposed attach 1ft below pole top.\",\n    );\n    calculatedCost += isNewConstruction ? 150 : 200;\n  } else if (powerPresent) {\n    proposedAttachFt = controlling.ft - effectiveSeparationFt;\n    ownerRecommendation = {\n      basis:\n        existingPowerVoltage === \"transmission\"\n          ? \"NESC-transmission\"\n          : isFirstEnergyOwner\n            ? \"FE\"\n            : \"NESC\",\n      detail: `${effectiveSeparationInches}\" below ${controlling.name}`,\n      clearanceIn: effectiveSeparationInches,\n      controlling,\n    };\n    notes.push(\n      `Owner rule: ${effectiveSeparationInches}\" below ${controlling.name} (${formatFeetInches(controlling.ft)} → attach at ${formatFeetInches(proposedAttachFt)})`,\n    );\n    calculatedCost += 200;\n  } else if (isNewConstruction) {\n    proposedAttachFt = poleData.aboveGround - clearances.minimumPoleTopSpace;\n    ownerRecommendation = {\n      basis: \"new-construction\",\n      detail: `${Math.round(clearances.minimumPoleTopSpace * 12)}\" below pole top`,\n      clearanceIn: Math.round(clearances.minimumPoleTopSpace * 12),\n      controlling: { name: \"pole top\", ft: poleData.aboveGround },\n    };\n    notes.push(\n      `New construction: attach ${formatFeetInches(clearances.minimumPoleTopSpace)} below pole top`,\n    );\n    calculatedCost += 150;\n  } else {\n    // Fallback to voltage-based rule if nothing else triggered\n    const pClear =\n      existingPowerVoltage === \"transmission\"\n        ? clearances.powerClearanceTransmission\n        : clearances.powerClearanceDistribution;\n    const powerFt = parseFeet(existingPowerHeight);\n    proposedAttachFt = (powerFt != null ? powerFt : 0) - pClear;\n    ownerRecommendation = {\n      basis: \"voltage-default\",\n      detail: `${Math.round((pClear || 0) * 12)}\" below power conductor`,\n      clearanceIn: Math.round((pClear || 0) * 12),\n      controlling: { name: \"power conductor\", ft: powerFt || 0 },\n    };\n    notes.push(\n      `Default rule: ${Math.round((pClear || 0) * 12)}\" below power conductor`,\n    );\n    calculatedCost += 200;\n  }\n\n  // Apply minimum communications attachment height if provided in submissionProfile\n  if (\n    submissionProfile &&\n    Number.isFinite(submissionProfile.minCommAttachFt) &&\n    proposedAttachFt != null\n  ) {\n    const minAttach = Number(submissionProfile.minCommAttachFt);\n    const allowedMax = powerPresent\n      ? controlling.ft - effectiveSeparationFt\n      : Infinity;\n    const clamped = Math.min(Math.max(proposedAttachFt, minAttach), allowedMax);\n    if (clamped !== proposedAttachFt) {\n      notes.push(\n        `Applied min communications attach height constraint: ${formatFeetInches(minAttach)} (clamped to maintain required separation if needed)`,\n      );\n      proposedAttachFt = clamped;\n    }\n  }\n\n  if (hasTransformer) {\n    notes.push(\n      \"Transformer present: add clearance review and potential construction complexity\",\n    );\n    calculatedCost += 300;\n  }\n\n  let sagFt = 0;\n  let midspanFt = null;\n  if (spanFt > 0 && adjacentPoleFt > 0 && proposedAttachFt != null) {\n    sagFt = calculateSag(\n      spanFt,\n      cableData.weight,\n      cableData.tension,\n      wind,\n      cableDiameter || cableData.diameter,\n      Number(iceThicknessIn) || 0,\n    );\n    const adjacentPoleData = getPoleBurialData(adjacentPoleFt);\n    // Estimate neighbor-end attach height\n    let neighborAttachFt = null;\n    if (\n      adjacentProposedAttachFt != null &&\n      Number.isFinite(Number(adjacentProposedAttachFt))\n    )\n      neighborAttachFt = Number(adjacentProposedAttachFt);\n    if (neighborAttachFt == null) {\n      const adjPowerFt = parseFeet(adjacentPowerHeight);\n      if (adjPowerFt != null)\n        neighborAttachFt = adjPowerFt - effectiveSeparationFt;\n    }\n    if (neighborAttachFt == null)\n      neighborAttachFt = Math.max(\n        0,\n        adjacentPoleData.aboveGround - clearances.minimumPoleTopSpace,\n      );\n    midspanFt = (proposedAttachFt + neighborAttachFt) / 2 - sagFt;\n    if (midspanFt < clearances.groundClearance) {\n      localWarnings.push(\n        `CRITICAL: midspan ${formatFeetInches(midspanFt)} < min ground clearance ${formatFeetInches(clearances.groundClearance)}`,\n      );\n    }\n    if (spanFt > 300) {\n      localWarnings.push(\n        \"Spans > 300 ft require special engineering and utility approval\",\n      );\n      calculatedCost += 500;\n    }\n    if (spanFt > 150 && String(attachmentType || \"\").includes(\"communication\"))\n      localWarnings.push(\n        \"Communication cable spans >150 ft may require intermediate support\",\n      );\n  }\n\n  // Drip loop specific clearance check (owner-based inches)\n  if (proposedFt != null && dripFt != null) {\n    const dripGapIn = (dripFt - proposedFt) * 12;\n    const reqIn = effectiveSeparationInches; // align with pole separation to power-owned equipment\n    if (dripGapIn < reqIn) {\n      localWarnings.push(\n        `Comm-to-Drip Loop at pole: ${dripGapIn.toFixed(1)}\" (need ${reqIn}\")`,\n      );\n      if (hasTransformer) {\n        notes.push(\n          \"Owner last‑resort: tuck drip loop to ~1ft above bottom of transformer to regain clearance (utility approval required).\",\n        );\n      }\n    }\n  }\n\n  // Additional owner rules and guidance (FirstEnergy/Mon Power style)\n  // These produce warnings or notes to guide field/design decisions; they don't hard-stop calculations.\n  if (isFirstEnergyOwner) {\n    // Minimum separations at pole to lowest power item; prefer stricter values if specified\n    const sepToPowerIn = effectiveSeparationInches; // 40\" typical, 44\" FE floor\n    if (proposedFt != null && controlling?.name) {\n      const gapIn = (controlling.ft - proposedFt) * 12;\n      if (gapIn < sepToPowerIn)\n        localWarnings.push(\n          `Comm-to-${controlling.name} at pole: ${gapIn.toFixed(1)}\" (need ${sepToPowerIn}\")`,\n        );\n    }\n    // 30\" below transformer bottom if that is lowest power control\n    const transformerBottomFt = (existingLines || []).find((l) =>\n      String(l?.type || \"\")\n        .toLowerCase()\n        .includes(\"transformer\"),\n    )?.height\n      ? parseFeet(\n          (existingLines || []).find((l) =>\n            String(l?.type || \"\")\n              .toLowerCase()\n              .includes(\"transformer\"),\n          ).height,\n        )\n      : null;\n    if (proposedFt != null && transformerBottomFt != null) {\n      const gapIn = (transformerBottomFt - proposedFt) * 12;\n      if (gapIn < 30)\n        localWarnings.push(\n          `Comm-to-Transformer bottom: ${gapIn.toFixed(1)}\" (need 30\")`,\n        );\n    }\n    // 20\" below street light (4\" if bonded)\n    const streetLightFt = parseFeet(inputs?.streetLightHeight);\n    if (proposedFt != null && streetLightFt != null) {\n      const bonded = false; // future: detect bonded flag\n      const req = bonded ? 4 : 20;\n      const gapIn = (streetLightFt - proposedFt) * 12;\n      if (gapIn < req)\n        localWarnings.push(\n          `Comm-to-Street Light: ${gapIn.toFixed(1)}\" (need ${req}\")`,\n        );\n    }\n    // 12\" street light drip loop (12\" if coated)\n    const slDripFt = (existingLines || []).find((l) =>\n      String(l?.type || \"\")\n        .toLowerCase()\n        .includes(\"street light drip\"),\n    )?.height\n      ? parseFeet(\n          (existingLines || []).find((l) =>\n            String(l?.type || \"\")\n              .toLowerCase()\n              .includes(\"street light drip\"),\n          ).height,\n        )\n      : null;\n    if (proposedFt != null && slDripFt != null) {\n      const gapIn = (slDripFt - proposedFt) * 12;\n      if (gapIn < 12)\n        localWarnings.push(\n          `Comm-to-Street Light Drip: ${gapIn.toFixed(1)}\" (need 12\")`,\n        );\n    }\n    // 4\" above street light (if crossing above)\n    if (\n      proposedFt != null &&\n      streetLightFt != null &&\n      proposedFt > streetLightFt\n    ) {\n      const gapIn = (proposedFt - streetLightFt) * 12;\n      if (gapIn < 4)\n        localWarnings.push(\n          `Comm above Street Light: ${gapIn.toFixed(1)}\" (need 4\")`,\n        );\n    }\n    // Midspan comm-to-comm: 12\" mains/laterals; 4\" drops\n    if (midspanFt != null) {\n      for (const line of existingLines || []) {\n        const t = String(line?.type || \"\").toLowerCase();\n        if (t.includes(\"communication\")) {\n          const otherFt = parseFeet(line?.height);\n          if (otherFt != null) {\n            const gapIn = Math.abs((midspanFt - otherFt) * 12);\n            const isDrop = t.includes(\"drop\");\n            const req = isDrop ? 4 : 12;\n            if (gapIn < req)\n              localWarnings.push(\n                `Midspan comm-to-comm (${isDrop ? \"drop\" : \"main\"}): ${gapIn.toFixed(1)}\" (need ${req}\")`,\n              );\n          }\n        }\n      }\n    }\n    // Ground targets: Interstate, Railroads, Water, Driveways, Yards\n    // (Targets are already applied via submissionProfile overrides; add contextual notes for clarity.)\n    if (spanEnvironment === \"railroad\")\n      notes.push(\"Railroad crossing: target 27 ft minimum ground clearance.\");\n    if (spanEnvironment === \"wvHighway\" || spanEnvironment === \"road\")\n      notes.push(\n        \"State roads/highways: 18 ft minimum; Interstate 21 ft for new crossings.\",\n      );\n  }\n\n  let makeReadyTotal = 0;\n  if (proposedFt != null) {\n    existingLines.forEach((line) => {\n      if (!line?.type) return;\n      const lineNewFt =\n        line.makeReady && line.makeReadyHeight\n          ? parseFeet(line.makeReadyHeight)\n          : parseFeet(line.height);\n      if (lineNewFt == null) return;\n      const lineInches = lineNewFt * 12;\n      const proposedInches = proposedFt * 12;\n      const isDrop = String(line.type).toLowerCase().includes(\"drop\");\n      const isNeutral = String(line.type).toLowerCase().includes(\"neutral\");\n      const isSecondary = String(line.type).toLowerCase().includes(\"secondary\");\n      let reqPoleIn = 12,\n        reqMidIn = 9;\n      if (isDrop) {\n        reqPoleIn = 6;\n        reqMidIn = 4;\n      } else if (isNeutral || isSecondary) {\n        // Owner-based clearance at pole: FE min 44\", others min 40\"; allow profile to increase via effective separation\n        reqPoleIn = effectiveSeparationInches;\n        reqMidIn = 15;\n      }\n      const poleGap = proposedInches - lineInches;\n      if (poleGap < reqPoleIn)\n        localWarnings.push(\n          `Pole clearance to ${line.type}: ${poleGap.toFixed(1)}\" (need ${reqPoleIn}\")`,\n        );\n      if (midspanFt != null) {\n        const midGap = midspanFt * 12 - lineInches;\n        if (midGap < reqMidIn)\n          localWarnings.push(\n            `Midspan clearance to ${line.type}: ${midGap.toFixed(1)}\" (need ${reqMidIn}\")`,\n          );\n      }\n      if (line.makeReady && line.makeReadyHeight && line.height) {\n        const oldFt = parseFeet(line.height);\n        const newFt = parseFeet(line.makeReadyHeight);\n        if (oldFt != null && newFt != null) {\n          const diffIn = (newFt - oldFt) * 12;\n          makeReadyTotal += Math.abs(Math.round(diffIn)) * 12.5;\n        }\n      }\n    });\n  }\n\n  let guy = null;\n  if (spanFt > 0 && poleData.aboveGround > 0 && proposedAttachFt) {\n    guy = calculateDownGuy(\n      poleData.aboveGround,\n      proposedAttachFt,\n      cableData,\n      spanFt,\n      wind,\n    );\n    if (guy?.required) {\n      notes.push(\"Down-guy likely required based on span and wind loading\");\n      calculatedCost += guy.totalCost || 0;\n    }\n  }\n\n  const results = {\n    pole: {\n      inputHeight: Number(poleHeight) || 0,\n      buriedFt: poleData.buried,\n      aboveGroundFt: poleData.aboveGround,\n      classInfo: poleData.classInfo,\n      latitude: poleLatitude ?? null,\n      longitude: poleLongitude ?? null,\n    },\n    attach: {\n      proposedAttachFt,\n      proposedAttachFmt: formatFeetInches(proposedAttachFt),\n      recommendation: ownerRecommendation,\n    },\n    span: {\n      spanFt,\n      wind,\n      sagFt,\n      sagFmt: formatFeetInches(sagFt),\n      midspanFt,\n      midspanFmt: formatFeetInches(midspanFt),\n    },\n    clearances,\n    makeReadyTotal,\n    guy,\n  };\n\n  const cost = (calculatedCost || 0) + (results.makeReadyTotal || 0);\n  return { results, warnings: localWarnings, notes, cost };\n}\n"],"names":["clamp","value","min","max","degToRad","deg","normalizeBearingDeg","bearing","b","normalizeIncludedAngleDeg","bearingA","bearingB","a","delta","theta","pullFromAngleDeg","thetaDeg","baseSpanFt","pull","computePullAutofill","incomingBearingDeg","outgoingBearingDeg","pullFt","parseFeet","_a","s","inchesOnly","feetOnly","ftInMatch","ft","inch","n","formatFeetInches","feet","compact","tickMarks","isNeg","abs","sign","formatFeetInchesTickMarks","formatFeetInchesVerbose","DEFAULTS","FIRST_ENERGY_OWNER_HINTS","getNESCClearances","voltage","environment","clearances","applyPresetToClearances","presetKey","preset","updated","resultsToCSV","results","warnings","makeReadyNotes","useTickMarks","lines","fmt","getPoleBurialData","height","poleClass","h","buried","aboveGround","recommendedClass","calculateSag","spanFt","weightLbsPerFt","tensionLbs","windSpeedMph","cableDiameterIn","iceThicknessIn","L","T","dFt","wVert","wHoriz","calculateDownGuy","poleAboveGroundFt","attachmentHeightFt","cableData","spanLengthFt","pullDirectionDeg","leverArm","span","wind","windLoadOnSpan","horizontalLoad","guyAttach","leadDistance","guyTension","guyAngle","required","totalCost","computeAnalysis","inputs","_b","poleHeight","poleLatitude","poleLongitude","adjacentPoleLatitude","adjacentPoleLongitude","existingPowerHeight","existingPowerVoltage","spanDistance","isNewConstruction","adjacentPoleHeight","adjacentPowerHeight","adjacentProposedAttachFt","attachmentType","cableDiameter","windSpeed","spanEnvironment","dripLoopHeight","proposedLineHeight","existingLines","hasTransformer","presetProfile","customMinTopSpace","customRoadClearance","customCommToPower","powerReference","jobOwner","submissionProfile","errs","poleData","c","toRad","d","lat1","lon1","lat2","lon2","dLat","dLon","adjacentPoleFt","proposedFt","dripFt","companyNamesEarly","l","isFEByPresetEarly","isFEByCompanyEarly","name","jobOwnerLcEarly","isFEByJobOwnerEarly","isFirstEnergyOwner","commToPowerIn","minTopSpaceFt","roadClearanceFt","envRoadFt","envResidentialFt","envPedestrianFt","envFieldFt","envResidentialYardFt","envResidentialDrivewayFt","envNonResidentialDrivewayFt","envWaterwayFt","envWVHighwayFt","envInterstateFt","envInterstateNewCrossingFt","envRailroadFt","localWarnings","notes","calculatedCost","heights","pushIf","val","line","t","controlling","findByName","powerPresent","hasCommCompany","commOwnerScenario","baseSeparationFt","ownerFloorFt","effectiveSeparationFt","effectiveSeparationInches","proposedAttachFt","ownerRecommendation","pClear","powerFt","minAttach","allowedMax","clamped","sagFt","midspanFt","adjacentPoleData","neighborAttachFt","adjPowerFt","dripGapIn","reqIn","sepToPowerIn","gapIn","transformerBottomFt","streetLightFt","slDripFt","otherFt","isDrop","req","makeReadyTotal","lineNewFt","lineInches","proposedInches","isNeutral","isSecondary","reqPoleIn","reqMidIn","poleGap","midGap","oldFt","newFt","diffIn","guy","cost"],"mappings":"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"}
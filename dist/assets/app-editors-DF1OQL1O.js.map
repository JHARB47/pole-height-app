{"version":3,"file":"app-editors-DF1OQL1O.js","sources":["../../src/components/ExistingLinesEditor.jsx","../../src/components/SpansEditor.jsx"],"sourcesContent":["import React from \"react\";\nimport useAppStore from \"../utils/store\";\nimport {\n  formatFeetInchesTickMarks,\n  formatFeetInchesVerbose,\n  parseFeet,\n} from \"../utils/calculations\";\nimport { WV_COMPANIES } from \"../utils/constants\";\n\nconst LINE_TYPES = [\n  { label: \"Communication\", value: \"communication\" },\n  { label: \"Drop (Comm)\", value: \"drop\" },\n  { label: \"Neutral\", value: \"neutral\" },\n  { label: \"Power Secondary\", value: \"secondary\" },\n];\n\nexport default function ExistingLinesEditor() {\n  const {\n    existingLines,\n    setExistingLines,\n    csvLineMapping,\n    setCsvLineMapping,\n    useTickMarkFormat,\n  } = useAppStore();\n  const fmt = useTickMarkFormat\n    ? formatFeetInchesTickMarks\n    : formatFeetInchesVerbose;\n  const [showCsv, setShowCsv] = React.useState(false);\n  const [csvText, setCsvText] = React.useState(\"\");\n  const [showMapModal, setShowMapModal] = React.useState(false);\n  const [headers, setHeaders] = React.useState([]);\n\n  // Simple CSV parser supporting quoted fields and commas\n  const parseCSV = (text) => {\n    const rows = [];\n    let i = 0,\n      field = \"\",\n      row = [],\n      inQuotes = false;\n    const pushField = () => {\n      row.push(field);\n      field = \"\";\n    };\n    const pushRow = () => {\n      if (row.length) rows.push(row);\n      row = [];\n    };\n    while (i < text.length) {\n      const ch = text[i];\n      if (inQuotes) {\n        if (ch === '\"') {\n          if (text[i + 1] === '\"') {\n            field += '\"';\n            i++;\n          } else {\n            inQuotes = false;\n          }\n        } else {\n          field += ch;\n        }\n      } else {\n        if (ch === '\"') inQuotes = true;\n        else if (ch === \",\") pushField();\n        else if (ch === \"\\n\") {\n          pushField();\n          pushRow();\n        } else if (ch === \"\\r\") {\n          /* skip */\n        } else field += ch;\n      }\n      i++;\n    }\n    // flush last field/row\n    pushField();\n    pushRow();\n    // Trim headers and values\n    return rows\n      .map((r) => r.map((c) => c.trim()))\n      .filter((r) => r.some((c) => c.length));\n  };\n\n  const update = (idx, field, value) => {\n    const copy = existingLines.slice();\n    copy[idx] = { ...copy[idx], [field]: value };\n    setExistingLines(copy);\n  };\n\n  const addRow = () =>\n    setExistingLines([\n      ...existingLines,\n      {\n        type: \"communication\",\n        height: \"\",\n        makeReady: false,\n        makeReadyHeight: \"\",\n        companyName: \"\",\n      },\n    ]);\n  const removeRow = (idx) =>\n    setExistingLines(existingLines.filter((_, i) => i !== idx));\n  const duplicateRow = (idx) => {\n    const arr = existingLines.slice();\n    const copy = { ...arr[idx] };\n    arr.splice(idx + 1, 0, copy);\n    setExistingLines(arr);\n  };\n  const moveRow = (idx, dir) => {\n    const to = idx + dir;\n    if (to < 0 || to >= existingLines.length) return;\n    const arr = existingLines.slice();\n    const [item] = arr.splice(idx, 1);\n    arr.splice(to, 0, item);\n    setExistingLines(arr);\n  };\n\n  const importCSV = () => {\n    const parsed = parseCSV(csvText || \"\");\n    if (!parsed.length) return;\n    const header = parsed[0];\n    setHeaders(header);\n    const idx = (name) =>\n      header.findIndex((h) => h.toLowerCase() === String(name).toLowerCase());\n    const iType = idx(csvLineMapping.type || \"type\");\n    const iCompany = idx(csvLineMapping.company || \"company\");\n    const iHeight = idx(csvLineMapping.height || \"height\");\n    const iMr = idx(csvLineMapping.makeReady || \"makeReady\");\n    const iMrH = idx(csvLineMapping.makeReadyHeight || \"makeReadyHeight\");\n    const rows = [];\n    for (let r = 1; r < parsed.length; r++) {\n      const cols = parsed[r];\n      const get = (i) => (i >= 0 && i < cols.length ? cols[i] : \"\");\n      rows.push({\n        type: get(iType) || \"communication\",\n        companyName: get(iCompany),\n        height: get(iHeight),\n        makeReady: /^(y|yes|true|1)$/i.test(get(iMr)),\n        makeReadyHeight: get(iMrH),\n      });\n    }\n    if (rows.length) setExistingLines(rows);\n    setShowCsv(false);\n    setCsvText(\"\");\n  };\n\n  const exportCSV = () => {\n    const header = [\n      \"type\",\n      \"company\",\n      \"height\",\n      \"makeReady\",\n      \"makeReadyHeight\",\n    ];\n    const rows = existingLines.map((r) => [\n      r.type || \"\",\n      r.companyName || \"\",\n      r.height || \"\",\n      r.makeReady ? \"true\" : \"false\",\n      r.makeReadyHeight || \"\",\n    ]);\n    const csv = [\n      header.join(\",\"),\n      ...rows.map((r) =>\n        r.map((v) => `${String(v).replaceAll('\"', '\"\"')}`).join(\",\"),\n      ),\n    ].join(\"\\n\");\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"existing-lines.csv\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const rowDeltaInches = (row) => {\n    if (!row.makeReady || !row.makeReadyHeight || !row.height) return 0;\n    const base = parseFeet(row.height);\n    const next = parseFeet(row.makeReadyHeight);\n    if (base == null || next == null) return 0;\n    return Math.round((next - base) * 12);\n  };\n\n  const rowCost = (row) => Math.abs(rowDeltaInches(row)) * 12.5;\n  const totalCost = existingLines.reduce((sum, r) => sum + rowCost(r), 0);\n  const exportSummaryCSV = () => {\n    const byCompany = existingLines.reduce((acc, r) => {\n      if (!r.makeReady) return acc;\n      const key = r.companyName || \"â€”\";\n      const deltaIn = Math.abs(\n        Math.round(\n          ((parseFeet(r.makeReadyHeight) || 0) - (parseFeet(r.height) || 0)) *\n            12,\n        ),\n      );\n      const cost = deltaIn * 12.5;\n      const cur = acc[key] || { rows: 0, deltaInches: 0, totalCost: 0 };\n      cur.rows += 1;\n      cur.deltaInches += deltaIn;\n      cur.totalCost += cost;\n      acc[key] = cur;\n      return acc;\n    }, {});\n    const header = [\"company\", \"rows\", \"deltaInches\", \"totalCost\"];\n    const rows = Object.entries(byCompany).map(([k, v]) => [\n      k,\n      v.rows,\n      v.deltaInches,\n      v.totalCost,\n    ]);\n    const csv = [header.join(\",\"), ...rows.map((r) => r.join(\",\"))].join(\"\\n\");\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"make-ready-summary.csv\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"rounded border p-3\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"font-medium\">Existing Lines</div>\n        <div className=\"flex items-center gap-2\">\n          <button\n            onClick={() => setShowCsv((s) => !s)}\n            className=\"text-sm px-2 py-1 border rounded\"\n          >\n            {showCsv ? \"Hide CSV\" : \"Import CSV\"}\n          </button>\n          <button\n            onClick={exportCSV}\n            className=\"text-sm px-2 py-1 border rounded\"\n          >\n            Export CSV\n          </button>\n          <button\n            onClick={exportSummaryCSV}\n            className=\"text-sm px-2 py-1 border rounded\"\n          >\n            Export Summary\n          </button>\n          <button\n            onClick={() => setExistingLines([])}\n            className=\"text-sm px-2 py-1 border rounded\"\n          >\n            Clear\n          </button>\n          <button onClick={addRow} className=\"text-sm px-2 py-1 border rounded\">\n            Add\n          </button>\n        </div>\n      </div>\n      {showCsv && (\n        <div className=\"mb-2\">\n          <textarea\n            className=\"w-full h-28 border rounded p-2 text-xs\"\n            placeholder=\"Paste CSV with headers: type,company,height,makeReady,makeReadyHeight\"\n            value={csvText}\n            onChange={(e) => setCsvText(e.target.value)}\n          />\n          <div className=\"flex items-center gap-2 mt-1\">\n            <button\n              onClick={() => setShowMapModal(true)}\n              className=\"text-sm px-2 py-1 border rounded\"\n            >\n              Map Columns\n            </button>\n            <button\n              onClick={() => {\n                // Auto-map headers using simple keyword heuristics\n                const lines = parseCSV(csvText || \"\");\n                if (!lines.length) return;\n                const hdr = lines[0].map((h) => h.toLowerCase());\n                const pick = (alts) => {\n                  for (const a of alts) {\n                    const i = hdr.indexOf(a);\n                    if (i >= 0) return lines[0][i];\n                  }\n                  // fallback contains\n                  for (const h of lines[0]) {\n                    if (alts.some((a) => h.toLowerCase().includes(a))) return h;\n                  }\n                  return \"\";\n                };\n                setCsvLineMapping({\n                  type: pick([\"type\", \"linetype\", \"category\"]),\n                  company: pick([\"company\", \"owner\", \"provider\"]),\n                  height: pick([\"height\", \"ht\", \"hgt\"]),\n                  makeReady: pick([\"makeready\", \"mr\", \"mr_flag\"]),\n                  makeReadyHeight: pick([\n                    \"newheight\",\n                    \"mr_height\",\n                    \"mrh\",\n                    \"makereadyheight\",\n                  ]),\n                });\n              }}\n              className=\"text-sm px-2 py-1 border rounded\"\n            >\n              Auto-map Headers\n            </button>\n            <button\n              onClick={importCSV}\n              className=\"text-sm px-2 py-1 border rounded\"\n            >\n              Use CSV\n            </button>\n            <div className=\"text-xs text-gray-600\">Replaces current table</div>\n          </div>\n        </div>\n      )}\n      <div className=\"overflow-auto break-anywhere\">\n        <table className=\"w-full text-sm\">\n          <thead>\n            <tr className=\"text-left text-gray-600\">\n              <th className=\"p-2\">Type</th>\n              <th className=\"p-2\">Owner</th>\n              <th className=\"p-2\">Height (ft/in)</th>\n              <th className=\"p-2\">Makeâ€‘ready?</th>\n              <th className=\"p-2\">New Height (ft/in)</th>\n              <th className=\"p-2\">Î” / Est. Cost</th>\n              <th className=\"p-2\"></th>\n            </tr>\n          </thead>\n          <tbody>\n            {existingLines.map((row, idx) => (\n              <tr key={idx} className=\"border-t\">\n                <td className=\"p-2\">\n                  <select\n                    className=\"border rounded px-2 py-1\"\n                    value={row.type}\n                    onChange={(e) => update(idx, \"type\", e.target.value)}\n                  >\n                    <option value=\"\">Select</option>\n                    {LINE_TYPES.map((t) => (\n                      <option key={t.value} value={t.value}>\n                        {t.label}\n                      </option>\n                    ))}\n                  </select>\n                </td>\n                <td className=\"p-2\">\n                  <input\n                    list=\"wv-companies\"\n                    className=\"border rounded px-2 py-1\"\n                    value={row.companyName || \"\"}\n                    onChange={(e) => update(idx, \"companyName\", e.target.value)}\n                    placeholder=\"e.g., Mon Power (Owner)\"\n                  />\n                  <datalist id=\"wv-companies\">\n                    {WV_COMPANIES.power.map((c) => (\n                      <option key={`p-${c.name}`} value={c.short || c.name}>\n                        {c.name}\n                      </option>\n                    ))}\n                    {WV_COMPANIES.communication.map((c) => (\n                      <option key={`c-${c.name}`} value={c.short || c.name}>\n                        {c.name}\n                      </option>\n                    ))}\n                  </datalist>\n                  <div className=\"text-[10px] text-gray-500 mt-0.5\">\n                    Tip: Use FE subsidiary names (Mon Power, Penelec, etc.) for\n                    FE rules.\n                  </div>\n                </td>\n                <td className=\"p-2\">\n                  <input\n                    className={`border rounded px-2 py-1 ${row.height && parseFeet(row.height) == null ? \"border-red-400 bg-red-50\" : \"\"}`}\n                    value={row.height || \"\"}\n                    onChange={(e) => update(idx, \"height\", e.target.value)}\n                    placeholder={\"e.g., 18' 6\\\"\"}\n                  />\n                </td>\n                <td className=\"p-2\">\n                  <label className=\"inline-flex items-center gap-2\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"h-4 w-4\"\n                      checked={!!row.makeReady}\n                      onChange={(e) =>\n                        update(idx, \"makeReady\", e.target.checked)\n                      }\n                    />\n                    <span>Yes</span>\n                  </label>\n                </td>\n                <td className=\"p-2\">\n                  <input\n                    className={`border rounded px-2 py-1 ${row.makeReady && row.makeReadyHeight && parseFeet(row.makeReadyHeight) == null ? \"border-red-400 bg-red-50\" : \"\"}`}\n                    value={row.makeReadyHeight || \"\"}\n                    disabled={!row.makeReady}\n                    onChange={(e) =>\n                      update(idx, \"makeReadyHeight\", e.target.value)\n                    }\n                    placeholder={\"e.g., 19' 6\\\"\"}\n                  />\n                  {row.makeReady &&\n                  row.makeReadyHeight &&\n                  row.height &&\n                  parseFeet(row.makeReadyHeight) != null &&\n                  parseFeet(row.height) != null ? (\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      Î”{\" \"}\n                      {fmt(\n                        parseFeet(row.makeReadyHeight) - parseFeet(row.height),\n                      )}\n                    </div>\n                  ) : null}\n                </td>\n                <td className=\"p-2 whitespace-nowrap text-xs text-gray-700\">\n                  {row.makeReady ? (\n                    <>\n                      {rowDeltaInches(row)}\" / ${rowCost(row)}\n                    </>\n                  ) : (\n                    \"â€”\"\n                  )}\n                </td>\n                <td className=\"p-2 text-right\">\n                  <div className=\"inline-flex items-center gap-2\">\n                    <button\n                      onClick={() => moveRow(idx, -1)}\n                      className=\"text-xs\"\n                    >\n                      â†‘\n                    </button>\n                    <button onClick={() => moveRow(idx, 1)} className=\"text-xs\">\n                      â†“\n                    </button>\n                    <button\n                      onClick={() => duplicateRow(idx)}\n                      className=\"text-xs\"\n                    >\n                      Duplicate\n                    </button>\n                    <button\n                      onClick={() => removeRow(idx)}\n                      className=\"text-xs text-red-600\"\n                    >\n                      Remove\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <div className=\"text-xs text-gray-600 mt-2\">\n        Rows: {existingLines.length} | Est. Makeâ€‘ready total: ${totalCost}\n      </div>\n      {existingLines.length ? (\n        <div className=\"text-xs text-gray-700 mt-1\">\n          <div className=\"font-medium\">By company:</div>\n          <ul className=\"list-disc pl-5\">\n            {Object.entries(\n              existingLines.reduce((acc, r) => {\n                if (!r.makeReady) return acc;\n                const key = r.companyName || \"â€”\";\n                acc[key] =\n                  (acc[key] || 0) +\n                  Math.abs(\n                    Math.round(\n                      ((parseFeet(r.makeReadyHeight) || 0) -\n                        (parseFeet(r.height) || 0)) *\n                        12,\n                    ),\n                  ) *\n                    12.5;\n                return acc;\n              }, {}),\n            ).map(([k, v]) => (\n              <li key={k}>\n                {k}: ${v}\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : null}\n      <CsvMapModal\n        open={showMapModal}\n        onClose={() => setShowMapModal(false)}\n        headers={headers}\n        mapping={csvLineMapping}\n        onChange={setCsvLineMapping}\n      />\n    </div>\n  );\n}\n\nfunction CsvMapModal({ open, onClose, headers, mapping, onChange }) {\n  if (!open) return null;\n  const keys = [\"type\", \"company\", \"height\", \"makeReady\", \"makeReadyHeight\"];\n  const set = (k, v) => onChange({ ...mapping, [k]: v });\n  return (\n    <div className=\"fixed inset-0 bg-black/30 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded shadow-lg w-[90vw] max-w-xl p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"font-medium\">Map CSV Columns</div>\n          <button className=\"text-sm\" onClick={onClose}>\n            Close\n          </button>\n        </div>\n        <div className=\"grid grid-cols-1 gap-2 text-sm\">\n          {keys.map((k) => (\n            <label key={k} className=\"grid grid-cols-2 items-center gap-2\">\n              <span className=\"text-xs uppercase text-gray-500\">{k}</span>\n              <select\n                className=\"border rounded px-2 py-1\"\n                value={mapping[k] || \"\"}\n                onChange={(e) => set(k, e.target.value)}\n              >\n                <option value=\"\">â€”</option>\n                {headers.map((h) => (\n                  <option key={h} value={h}>\n                    {h}\n                  </option>\n                ))}\n              </select>\n            </label>\n          ))}\n        </div>\n        <div className=\"text-xs text-gray-600 mt-2\">\n          Tip: set once and itâ€™s remembered.\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useAppStore from \"../utils/store\";\nimport { computeAnalysis, formatFeetInches } from \"../utils/calculations\";\nimport { controllingGroundTarget } from \"../utils/targets\";\n\nfunction SegmentEditor({ segments, onChange }) {\n  const [open, setOpen] = React.useState(false);\n  const segs = segments || [];\n  const setSeg = (idx, patch) => {\n    const arr = segs.slice();\n    arr[idx] = { ...(arr[idx] || {}), ...patch };\n    onChange(arr);\n  };\n  const addSeg = () =>\n    onChange([\n      ...(segs || []),\n      {\n        id: `seg-${Date.now()}-${Math.random().toString(36).slice(2, 6)}`,\n        env: \"road\",\n        portion:\n          100 - (segs || []).reduce((a, b) => a + (Number(b.portion) || 0), 0),\n      },\n    ]);\n  const removeSeg = (idx) => onChange((segs || []).filter((_, i) => i !== idx));\n  const total = (segs || []).reduce((a, b) => a + (Number(b.portion) || 0), 0);\n  return (\n    <div>\n      <button\n        className=\"px-2 py-0.5 border rounded text-xs\"\n        onClick={() => setOpen((o) => !o)}\n      >\n        {open ? \"Hide\" : \"Edit\"}\n      </button>\n      {open && (\n        <div className=\"mt-1 space-y-1\">\n          {segs.length ? (\n            segs.map((sg, i) => (\n              <div\n                key={sg.id ?? `${sg.env || \"env\"}-${sg.portion ?? \"\"}`}\n                className=\"flex items-center gap-2\"\n              >\n                <select\n                  className=\"border rounded px-1 py-0.5 text-xs\"\n                  value={sg.env || \"\"}\n                  onChange={(e) => setSeg(i, { env: e.target.value })}\n                >\n                  <option value=\"road\">Road</option>\n                  <option value=\"residential\">Residential</option>\n                  <option value=\"pedestrian\">Pedestrian</option>\n                  <option value=\"field\">Field</option>\n                  <option value=\"residentialYard\">Residential Yard</option>\n                  <option value=\"residentialDriveway\">\n                    Residential Driveway\n                  </option>\n                  <option value=\"nonResidentialDriveway\">\n                    Non-Residential Driveway\n                  </option>\n                  <option value=\"waterway\">Waterway</option>\n                  <option value=\"interstate\">Interstate</option>\n                  <option value=\"interstateNewCrossing\">\n                    Interstate (New Crossing)\n                  </option>\n                  <option value=\"wvHighway\">WV Highway</option>\n                  <option value=\"railroad\">Railroad</option>\n                </select>\n                <input\n                  className=\"border rounded px-1 py-0.5 w-16 text-xs\"\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"1\"\n                  value={sg.portion ?? \"\"}\n                  onChange={(e) =>\n                    setSeg(i, { portion: Number(e.target.value) })\n                  }\n                  placeholder=\"%\"\n                />\n                <button\n                  className=\"px-1 py-0.5 border rounded text-xs\"\n                  onClick={() => removeSeg(i)}\n                >\n                  x\n                </button>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-xs text-gray-500\">No segments</div>\n          )}\n          <div className=\"flex items-center gap-2\">\n            <button\n              className=\"px-2 py-0.5 border rounded text-xs\"\n              onClick={addSeg}\n            >\n              Add\n            </button>\n            <span\n              className={`text-[10px] ${total > 100 ? \"text-red-600\" : \"text-gray-600\"}`}\n            >\n              Total: {total}%\n            </span>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nSegmentEditor.propTypes = {\n  segments: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default function SpansEditor() {\n  const store = useAppStore();\n  const spans = React.useMemo(\n    () => store.importedSpans || [],\n    [store.importedSpans],\n  );\n  const [openDetail, setOpenDetail] = React.useState(null); // row index for mobile-friendly details\n  const [showFailOnly, setShowFailOnly] = React.useState(false);\n  const [showBigDeltaOnly, setShowBigDeltaOnly] = React.useState(false);\n\n  const onEnvChange = (idx, val) => {\n    store.updateImportedSpan(idx, { environment: val });\n  };\n\n  const getEffectiveProfile = React.useCallback(() => {\n    const job = (store.jobs || []).find((j) => j.id === store.currentJobId);\n    const name = job?.submissionProfileName || store.currentSubmissionProfile;\n    const base =\n      (store.submissionProfiles || []).find((p) => p.name === name) || {};\n    return { ...base, ...(job?.submissionProfileOverrides || {}) };\n  }, [\n    store.jobs,\n    store.currentJobId,\n    store.currentSubmissionProfile,\n    store.submissionProfiles,\n  ]);\n\n  const controllingTargetFromSegments = React.useCallback(\n    (segments, fallbackEnv) =>\n      controllingGroundTarget(getEffectiveProfile(), segments, fallbackEnv),\n    [getEffectiveProfile],\n  );\n\n  // Helpers to resolve pole coordinates and infer endpoints when unlabeled\n  const getAllPoles = React.useCallback(() => {\n    const poles = [\n      ...(store.importedPoles || []),\n      ...(store.collectedPoles || []),\n    ];\n    // Normalize property names to { id, latitude, longitude }\n    return poles\n      .map((p) => ({\n        id: p.id || p.poleId || p.name || \"\",\n        latitude:\n          typeof p.latitude === \"number\" ? p.latitude : Number(p.latitude),\n        longitude:\n          typeof p.longitude === \"number\" ? p.longitude : Number(p.longitude),\n        jobId: p.jobId || \"\",\n      }))\n      .filter(\n        (p) =>\n          p.id && Number.isFinite(p.latitude) && Number.isFinite(p.longitude),\n      );\n  }, [store.importedPoles, store.collectedPoles]);\n  const poleIndex = React.useCallback(() => {\n    const idx = new Map();\n    for (const p of getAllPoles()) idx.set(String(p.id), p);\n    return idx;\n  }, [getAllPoles]);\n  const haversineFt = React.useCallback((lat1, lon1, lat2, lon2) => {\n    const toRad = (d) => (d * Math.PI) / 180;\n    const Rm = 6371000; // meters\n    const dLat = toRad((lat2 || 0) - (lat1 || 0));\n    const dLon = toRad((lon2 || 0) - (lon1 || 0));\n    const a =\n      Math.sin(dLat / 2) ** 2 +\n      Math.cos(toRad(lat1 || 0)) *\n        Math.cos(toRad(lat2 || 0)) *\n        Math.sin(dLon / 2) ** 2;\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const meters = Rm * c;\n    return meters * 3.28084; // feet\n  }, []);\n  const midpoint = (a, b) => {\n    if (!a || !b) return null;\n    return {\n      lat: (a.latitude + b.latitude) / 2,\n      lon: (a.longitude + b.longitude) / 2,\n    };\n  };\n  const getSpanLengthFt = React.useCallback(\n    (s) => {\n      if (!s) return undefined;\n      const idx = poleIndex();\n      const f = s.fromId != null ? idx.get(String(s.fromId)) : undefined;\n      const t = s.toId != null ? idx.get(String(s.toId)) : undefined;\n      if (f && t) {\n        const ft = haversineFt(\n          f.latitude,\n          f.longitude,\n          t.latitude,\n          t.longitude,\n        );\n        return Number.isFinite(ft) ? Math.round(ft) : undefined;\n      }\n      return undefined;\n    },\n    [poleIndex, haversineFt],\n  );\n  const inferEndpointsForSpan = (s) => {\n    const idx = poleIndex();\n    // Helper to get pole by id\n    const getPole = (id) => (id != null ? idx.get(String(id)) : undefined);\n    let from = getPole(s.fromId);\n    let to = getPole(s.toId);\n    let mid = from && to ? midpoint(from, to) : null;\n\n    // Early return if endpoints are present\n    if (from && to) {\n      const midCoord = midpoint(from, to);\n      return {\n        from: { id: from.id, lat: from.latitude, lon: from.longitude },\n        to: { id: to.id, lat: to.latitude, lon: to.longitude },\n        mid: midCoord ? { lat: midCoord.lat, lon: midCoord.lon } : null,\n      };\n    }\n\n    // Try inferring endpoints if missing\n    let hintMid = mid;\n    if (!hintMid) {\n      const lat = Number(store.poleLatitude);\n      const lon = Number(store.poleLongitude);\n      if (Number.isFinite(lat) && Number.isFinite(lon)) hintMid = { lat, lon };\n    }\n    const poles = Array.from(idx.values());\n    if (hintMid && poles.length >= 2) {\n      // pick nearest two poles to the hint midpoint\n      const sorted = poles\n        .map((p) => ({\n          p,\n          d: haversineFt(hintMid.lat, hintMid.lon, p.latitude, p.longitude),\n        }))\n        .sort((a, b) => a.d - b.d)\n        .slice(0, 2)\n        .map((x) => x.p);\n      if (!from && sorted[0]) s.fromId = sorted[0].id;\n      if (!to && sorted[1]) s.toId = sorted[1].id;\n      from = getPole(s.fromId);\n      to = getPole(s.toId);\n    }\n    const midCoord = from && to ? midpoint(from, to) : null;\n    return {\n      from: from\n        ? { id: from.id, lat: from.latitude, lon: from.longitude }\n        : null,\n      to: to ? { id: to.id, lat: to.latitude, lon: to.longitude } : null,\n      mid: midCoord ? { lat: midCoord.lat, lon: midCoord.lon } : null,\n    };\n  };\n\n  // Derived analytics for spans (midspan PASS/FAIL and delta buckets)\n\n  const derived = React.useMemo(() => {\n    // Build pole index once per calculation cycle to avoid O(n) Map rebuild per span\n    const idx = poleIndex();\n\n    // Fast span length using the precomputed index\n    const getSpanLengthFtFast = (s) => {\n      if (!s) return undefined;\n      const get = (id) => (id != null ? idx.get(String(id)) : undefined);\n      const f = get(s.fromId);\n      const t = get(s.toId);\n      if (f && t) {\n        const ft = haversineFt(\n          f.latitude,\n          f.longitude,\n          t.latitude,\n          t.longitude,\n        );\n        return Number.isFinite(ft) ? Math.round(ft) : undefined;\n      }\n      return undefined;\n    };\n\n    // Modular analytics for multi data-set inference\n    function getSpanMeta(s) {\n      const autoLen = getSpanLengthFtFast(s);\n      const hasManual = !!s.lengthFt;\n      const manualLen = hasManual ? Number(s.lengthFt) : null;\n      const shownLen = store.preferAutoSpanLength\n        ? autoLen || manualLen || 0\n        : manualLen || autoLen || 0;\n      const delta =\n        autoLen != null && manualLen != null\n          ? Math.abs(autoLen - manualLen)\n          : 0;\n      const bigDelta = delta >= (Number(store.spanLenDeltaThresholdFt) || 10);\n      const endpoints = Boolean(s.fromId && s.toId);\n      let pass = null,\n        fail = null;\n      try {\n        const a = computeAnalysis({\n          poleHeight: store.poleHeight || 35,\n          existingPowerHeight: store.existingPowerHeight || \"\",\n          existingPowerVoltage: store.existingPowerVoltage || \"distribution\",\n          spanDistance: shownLen,\n          isNewConstruction: store.isNewConstruction,\n          adjacentPoleHeight:\n            store.adjacentPoleHeight || store.poleHeight || 35,\n          attachmentType: store.attachmentType,\n          cableDiameter: store.cableDiameter,\n          windSpeed: store.windSpeed,\n          spanEnvironment: s.environment || store.spanEnvironment,\n          dripLoopHeight: store.dripLoopHeight,\n          proposedLineHeight: store.proposedLineHeight,\n          existingLines: store.existingLines,\n          iceThicknessIn: store.iceThicknessIn,\n          hasTransformer: store.hasTransformer,\n          presetProfile: store.presetProfile,\n          customMinTopSpace: store.customMinTopSpace,\n          customRoadClearance: store.customRoadClearance,\n          customCommToPower: store.customCommToPower,\n          powerReference: store.powerReference,\n          jobOwner: store.jobOwner,\n          submissionProfile: getEffectiveProfile(),\n        });\n        const target =\n          controllingTargetFromSegments(\n            s.segments,\n            s.environment || store.spanEnvironment,\n          ) ?? a?.results?.clearances?.groundClearance;\n        const mid = a?.results?.span?.midspanFt;\n        if (mid != null && target != null) {\n          pass = Number(mid) >= Number(target);\n          fail = !pass;\n        }\n      } catch {\n        /* intentionally ignore analysis errors for summary */\n      }\n      return {\n        ...s,\n        autoLen,\n        manualLen,\n        shownLen,\n        delta,\n        bigDelta,\n        endpoints,\n        pass,\n        fail,\n      };\n    }\n\n    // Aggregate analytics for all spans\n    const list = spans.map(getSpanMeta);\n    const counts = {\n      total: list.length,\n      withEndpoints: list.filter((x) => x.endpoints).length,\n      autoAvailable: list.filter((x) => x.autoLen).length,\n      manualCount: list.filter((x) => x.manualLen != null).length,\n      pass: list.filter((x) => x.pass === true).length,\n      fail: list.filter((x) => x.fail === true).length,\n    };\n    const buckets = {\n      \"â‰¤5ft\": list.filter((x) => x.delta <= 5).length,\n      \"6â€“15ft\": list.filter((x) => x.delta > 5 && x.delta <= 15).length,\n      \"16â€“30ft\": list.filter((x) => x.delta > 15 && x.delta <= 30).length,\n      \">30ft\": list.filter((x) => x.delta > 30).length,\n    };\n    return { list, counts, buckets };\n  }, [\n    spans,\n    store.preferAutoSpanLength,\n    store.spanLenDeltaThresholdFt,\n    store.poleHeight,\n    store.existingPowerHeight,\n    store.existingPowerVoltage,\n    store.isNewConstruction,\n    store.adjacentPoleHeight,\n    store.attachmentType,\n    store.cableDiameter,\n    store.windSpeed,\n    store.spanEnvironment,\n    store.dripLoopHeight,\n    store.proposedLineHeight,\n    store.existingLines,\n    store.iceThicknessIn,\n    store.hasTransformer,\n    store.presetProfile,\n    store.customMinTopSpace,\n    store.customRoadClearance,\n    store.customCommToPower,\n    store.powerReference,\n    store.jobOwner,\n    controllingTargetFromSegments,\n    getEffectiveProfile,\n    poleIndex,\n    haversineFt,\n  ]);\n\n  const isRowVisible = (i) => {\n    const r = derived.list[i];\n    if (showFailOnly && r?.pass !== false) return false;\n    if (showBigDeltaOnly && !r?.bigDelta) return false;\n    return true;\n  };\n\n  // --- UI helpers to reduce complexity in render ---\n  const sourceLabel = (preferAuto, s, autoLen) => {\n    if (preferAuto && autoLen) return \"auto\";\n    if (s.lengthFt) return \"manual\";\n    if (s.estimatedLengthFt) return \"est\";\n    if (autoLen) return \"auto*\";\n    return \"â€”\";\n  };\n  const sourceTitle = (preferAuto, s, autoLen) => {\n    if (preferAuto && autoLen) return \"Using auto length from coordinates\";\n    if (s.lengthFt) return \"Using manual length\";\n    if (s.estimatedLengthFt) return \"Using estimated length\";\n    if (autoLen) return \"Auto length available\";\n    return \"No length available\";\n  };\n  const computeInlineStatus = (s, preferAuto, autoLen) => {\n    try {\n      const spanDistance = preferAuto\n        ? autoLen || s.lengthFt || s.estimatedLengthFt || 0\n        : s.lengthFt || s.estimatedLengthFt || autoLen || 0;\n      const a = computeAnalysis(buildAnalysisInput(s, spanDistance));\n      const target =\n        controllingTargetFromSegments(\n          s.segments,\n          s.environment || store.spanEnvironment,\n        ) ?? a?.results?.clearances?.groundClearance;\n      const mid = a?.results?.span?.midspanFt;\n      if (mid != null && target != null) return Number(mid) >= Number(target);\n    } catch {\n      /* ignore analysis preview errors */\n    }\n    return null;\n  };\n  const computeAutoDetailStatus = (s, autoLen) => {\n    try {\n      const a = computeAnalysis(buildAnalysisInput(s, autoLen || 0));\n      const target =\n        controllingTargetFromSegments(\n          s.segments,\n          s.environment || store.spanEnvironment,\n        ) ?? a?.results?.clearances?.groundClearance;\n      const mid = a?.results?.span?.midspanFt;\n      const ok =\n        mid != null && target != null ? Number(mid) >= Number(target) : null;\n      return { mid, target, ok };\n    } catch {\n      return { mid: null, target: null, ok: null };\n    }\n  };\n  const buildAutoTip = (autoLen, f, t) =>\n    autoLen && f && t\n      ? `auto: ${autoLen} ft\\nfrom (${f.latitude?.toFixed?.(6)}, ${f.longitude?.toFixed?.(6)})\\nto   (${t.latitude?.toFixed?.(6)}, ${t.longitude?.toFixed?.(6)})`\n      : \"\";\n\n  // Shared helpers to reduce duplication/complexity\n  const buildAnalysisInput = (s, spanDistance) => ({\n    poleHeight: store.poleHeight || 35,\n    existingPowerHeight: store.existingPowerHeight || \"\",\n    existingPowerVoltage: store.existingPowerVoltage || \"distribution\",\n    spanDistance,\n    isNewConstruction: store.isNewConstruction,\n    adjacentPoleHeight: store.adjacentPoleHeight || store.poleHeight || 35,\n    attachmentType: store.attachmentType,\n    cableDiameter: store.cableDiameter,\n    windSpeed: store.windSpeed,\n    spanEnvironment: s.environment || store.spanEnvironment,\n    dripLoopHeight: store.dripLoopHeight,\n    proposedLineHeight: store.proposedLineHeight,\n    existingLines: store.existingLines,\n    iceThicknessIn: store.iceThicknessIn,\n    hasTransformer: store.hasTransformer,\n    presetProfile: store.presetProfile,\n    customMinTopSpace: store.customMinTopSpace,\n    customRoadClearance: store.customRoadClearance,\n    customCommToPower: store.customCommToPower,\n    powerReference: store.powerReference,\n    jobOwner: store.jobOwner,\n    submissionProfile: getEffectiveProfile(),\n  });\n\n  const determineSpanLenSource = (preferAuto, autoLen, s) => {\n    if (preferAuto) {\n      if (autoLen) return \"auto\";\n      if (s.lengthFt) return \"lengthFt\";\n      if (s.estimatedLengthFt) return \"estimatedLengthFt\";\n      return \"unknown\";\n    }\n    if (s.lengthFt) return \"lengthFt\";\n    if (s.estimatedLengthFt) return \"estimatedLengthFt\";\n    if (autoLen) return \"auto\";\n    return \"unknown\";\n  };\n\n  const runCalc = (idx) => {\n    const s = spans[idx];\n    const autoLen = getSpanLengthFt(s);\n    // Refactored to reduce cognitive complexity\n    const preferAuto = !!store.preferAutoSpanLength;\n    const spanLenSource = determineSpanLenSource(preferAuto, autoLen, s);\n    const spanDistance = preferAuto\n      ? autoLen || s.lengthFt || s.estimatedLengthFt || 0\n      : s.lengthFt || s.estimatedLengthFt || autoLen || 0;\n    const a = computeAnalysis(buildAnalysisInput(s, spanDistance));\n    if (a?.results) {\n      const controllingTargetFt = controllingTargetFromSegments(\n        s.segments,\n        s.environment || store.spanEnvironment,\n      );\n      const coords = inferEndpointsForSpan(s);\n      // Persist inferred endpoints back into the span row for clarity\n      const endpointPatch = {};\n      if ((s.fromId == null || s.fromId === \"\") && coords?.from?.id)\n        endpointPatch.fromId = coords.from.id;\n      if ((s.toId == null || s.toId === \"\") && coords?.to?.id)\n        endpointPatch.toId = coords.to.id;\n      if (Object.keys(endpointPatch).length)\n        store.updateImportedSpan(idx, endpointPatch);\n      // Compute metadata\n      const mid = a.results.span.midspanFt;\n      const target =\n        controllingTargetFt ?? a.results.clearances.groundClearance;\n      let pass = null;\n      if (mid != null && target != null) pass = Number(mid) >= Number(target);\n      const deficitFt =\n        pass === false\n          ? Math.max(0, Number(target) - Number(mid))\n          : pass === true\n            ? 0\n            : null;\n      const manualLen = s.lengthFt != null ? Number(s.lengthFt) : null;\n      const autoLen2 = getSpanLengthFt(s) ?? null;\n      const deltaFt =\n        manualLen != null && autoLen2 != null\n          ? Math.abs(manualLen - autoLen2)\n          : null;\n      store.addCachedMidspan({\n        spanId: s.id || `${idx + 1}`,\n        environment: s.environment || store.spanEnvironment,\n        spanFt: a.results.span.spanFt,\n        midspanFt: a.results.span.midspanFt,\n        targetFt: controllingTargetFt ?? a.results.clearances.groundClearance,\n        attachFt: a.results.attach.proposedAttachFt,\n        segments: Array.isArray(s.segments) ? s.segments : null,\n        spanLenSource,\n        pass,\n        deficitFt,\n        deltaFt,\n        // coordinates\n        midLat: coords?.mid?.lat ?? \"\",\n        midLon: coords?.mid?.lon ?? \"\",\n        fromId: coords?.from?.id ?? \"\",\n        toId: coords?.to?.id ?? \"\",\n        fromLat: coords?.from?.lat ?? \"\",\n        fromLon: coords?.from?.lon ?? \"\",\n        toLat: coords?.to?.lat ?? \"\",\n        toLon: coords?.to?.lon ?? \"\",\n      });\n    }\n  };\n\n  const saveOnly = (idx) => {\n    const s = spans[idx];\n    const coords = inferEndpointsForSpan(s);\n    const autoLen = getSpanLengthFt(s);\n    const preferAuto = !!store.preferAutoSpanLength;\n    const spanLenSource = determineSpanLenSource(preferAuto, autoLen, s);\n    // Persist inferred endpoints back into the span row for clarity\n    const endpointPatch = {};\n    if ((s.fromId == null || s.fromId === \"\") && coords?.from?.id)\n      endpointPatch.fromId = coords.from.id;\n    if ((s.toId == null || s.toId === \"\") && coords?.to?.id)\n      endpointPatch.toId = coords.to.id;\n    if (Object.keys(endpointPatch).length)\n      store.updateImportedSpan(idx, endpointPatch);\n    const manualLen = s.lengthFt != null ? Number(s.lengthFt) : null;\n    const deltaFt =\n      manualLen != null && autoLen != null\n        ? Math.abs(manualLen - autoLen)\n        : null;\n    store.addCachedMidspan({\n      spanId: s.id || `${idx + 1}`,\n      environment: s.environment || store.spanEnvironment,\n      spanFt: preferAuto\n        ? autoLen || s.lengthFt || s.estimatedLengthFt || 0\n        : s.lengthFt || s.estimatedLengthFt || autoLen || 0,\n      midspanFt: null,\n      targetFt:\n        controllingTargetFromSegments(\n          s.segments,\n          s.environment || store.spanEnvironment,\n        ) ?? null,\n      attachFt: null,\n      segments: Array.isArray(s.segments) ? s.segments : null,\n      spanLenSource,\n      pass: null,\n      deficitFt: null,\n      deltaFt,\n      // coordinates\n      midLat: coords?.mid?.lat ?? \"\",\n      midLon: coords?.mid?.lon ?? \"\",\n      fromId: coords?.from?.id ?? \"\",\n      toId: coords?.to?.id ?? \"\",\n      fromLat: coords?.from?.lat ?? \"\",\n      fromLon: coords?.from?.lon ?? \"\",\n      toLat: coords?.to?.lat ?? \"\",\n      toLon: coords?.to?.lon ?? \"\",\n    });\n  };\n\n  return !spans.length ? null : (\n    <div className=\"rounded border p-3 no-print\">\n      <div className=\"font-medium mb-2\">\n        Spans (Perâ€‘span Environment & Quick Calc)\n      </div>\n      {/* Analytics summary */}\n      <div className=\"mb-2 grid grid-cols-1 md:grid-cols-3 gap-2 text-xs md:text-sm\">\n        <div className=\"border rounded p-2\">\n          <div className=\"font-medium mb-1\">Status</div>\n          <div>Total: {derived.counts.total}</div>\n          <div>With endpoints: {derived.counts.withEndpoints}</div>\n          <div>Auto available: {derived.counts.autoAvailable}</div>\n          <div>Manual lengths: {derived.counts.manualCount}</div>\n        </div>\n        <div className=\"border rounded p-2\">\n          <div className=\"font-medium mb-1\">Compliance</div>\n          <div className=\"text-emerald-700\">PASS: {derived.counts.pass}</div>\n          <div className=\"text-red-700\">FAIL: {derived.counts.fail}</div>\n        </div>\n        <div className=\"border rounded p-2\">\n          <div className=\"font-medium mb-1\">Î” buckets (manual vs auto)</div>\n          <div>â‰¤5ft: {derived.buckets[\"â‰¤5ft\"]}</div>\n          <div>6â€“15ft: {derived.buckets[\"6â€“15ft\"]}</div>\n          <div>16â€“30ft: {derived.buckets[\"16â€“30ft\"]}</div>\n          <div>&gt;30ft: {derived.buckets[\">30ft\"]}</div>\n        </div>\n      </div>\n      <div className=\"mb-2 flex flex-wrap items-center gap-2\">\n        <label\n          className=\"inline-flex items-center gap-1 text-sm text-gray-700\"\n          title=\"When on, calculations use GPS auto length when available.\"\n        >\n          <input\n            type=\"checkbox\"\n            checked={!!store.preferAutoSpanLength}\n            onChange={(e) => store.setPreferAutoSpanLength(e.target.checked)}\n          />\n          <span className=\"ml-1\">Prefer auto length</span>\n        </label>\n        <label\n          className=\"inline-flex items-center gap-1 text-sm text-gray-700\"\n          title=\"Row density affects padding and font size\"\n        >\n          <span className=\"mr-1\">Density</span>\n          <select\n            className=\"border rounded px-1 py-0.5 text-xs\"\n            value={store.tableDensity}\n            onChange={(e) => store.setTableDensity(e.target.value)}\n          >\n            <option value=\"comfortable\">Comfortable</option>\n            <option value=\"compact\">Compact</option>\n          </select>\n        </label>\n        <label\n          className=\"inline-flex items-center gap-1 text-sm text-gray-700\"\n          title=\"Show only FAIL rows based on midspan vs target\"\n        >\n          <input\n            type=\"checkbox\"\n            checked={showFailOnly}\n            onChange={(e) => setShowFailOnly(e.target.checked)}\n          />\n          <span className=\"ml-1\">Only FAIL</span>\n        </label>\n        <label\n          className=\"inline-flex items-center gap-1 text-sm text-gray-700\"\n          title=\"Show only rows where manual vs auto Î” â‰¥ threshold\"\n        >\n          <input\n            type=\"checkbox\"\n            checked={showBigDeltaOnly}\n            onChange={(e) => setShowBigDeltaOnly(e.target.checked)}\n          />\n          <span className=\"ml-1\">Only big Î”</span>\n        </label>\n        <label\n          className=\"inline-flex items-center gap-1 text-sm text-gray-700\"\n          title=\"Show/Hide Segments column\"\n        >\n          <input\n            type=\"checkbox\"\n            checked={!!store.spansColumnSegmentsVisible}\n            onChange={(e) =>\n              store.setSpansColumnSegmentsVisible(e.target.checked)\n            }\n          />\n          <span className=\"ml-1\">Segments</span>\n        </label>\n        <label\n          className=\"inline-flex items-center gap-1 text-sm text-gray-700\"\n          title=\"Show/Hide Actions column\"\n        >\n          <input\n            type=\"checkbox\"\n            checked={!!store.spansColumnActionsVisible}\n            onChange={(e) =>\n              store.setSpansColumnActionsVisible(e.target.checked)\n            }\n          />\n          <span className=\"ml-1\">Actions</span>\n        </label>\n        <label\n          className=\"inline-flex items-center gap-1 text-sm text-gray-700\"\n          title=\"Highlight Î” badge when manual vs auto length differs by this amount or more.\"\n        >\n          <span className=\"mr-1\">Î” threshold (ft)</span>\n          <input\n            className=\"border rounded px-1 py-0.5 w-16 text-xs\"\n            type=\"number\"\n            min=\"0\"\n            step=\"1\"\n            value={store.spanLenDeltaThresholdFt ?? 10}\n            onChange={(e) => store.setSpanLenDeltaThresholdFt(e.target.value)}\n          />\n        </label>\n        {!!(store.cachedMidspans || []).length && (\n          <button\n            className=\"px-2 py-0.5 border rounded text-sm\"\n            onClick={() => {\n              const rows = [\n                [\n                  \"spanId\",\n                  \"environment\",\n                  \"spanFt\",\n                  \"spanLenSource\",\n                  \"midspanFt\",\n                  \"targetFt\",\n                  \"attachFt\",\n                  \"pass\",\n                  \"deficitFt\",\n                  \"deltaFt\",\n                  \"midLat\",\n                  \"midLon\",\n                  \"fromId\",\n                  \"toId\",\n                  \"fromLat\",\n                  \"fromLon\",\n                  \"toLat\",\n                  \"toLon\",\n                  \"segments\",\n                ],\n              ];\n              for (const m of store.cachedMidspans || []) {\n                rows.push([\n                  m.spanId ?? \"\",\n                  m.environment ?? \"\",\n                  m.spanFt ?? \"\",\n                  m.spanLenSource ?? \"\",\n                  m.midspanFt ?? \"\",\n                  m.targetFt ?? \"\",\n                  m.attachFt ?? \"\",\n                  m.pass === true ? \"PASS\" : m.pass === false ? \"FAIL\" : \"\",\n                  m.deficitFt ?? \"\",\n                  m.deltaFt ?? \"\",\n                  m.midLat ?? \"\",\n                  m.midLon ?? \"\",\n                  m.fromId ?? \"\",\n                  m.toId ?? \"\",\n                  m.fromLat ?? \"\",\n                  m.fromLon ?? \"\",\n                  m.toLat ?? \"\",\n                  m.toLon ?? \"\",\n                  Array.isArray(m.segments)\n                    ? m.segments\n                        .map((x) => `${x.env}:${x.portion || \"\"}`)\n                        .join(\"|\")\n                    : \"\",\n                ]);\n              }\n              const csv = rows\n                .map((r) =>\n                  r\n                    .map((v) => String(v).replaceAll('\"', '\"\"'))\n                    .map((v) => (v.includes(\",\") ? `\"${v}\"` : v))\n                    .join(\",\"),\n                )\n                .join(\"\\n\");\n              const blob = new Blob([csv], { type: \"text/csv\" });\n              const url = URL.createObjectURL(blob);\n              const a = document.createElement(\"a\");\n              a.href = url;\n              a.download = \"cached_midspans.csv\";\n              a.click();\n              URL.revokeObjectURL(url);\n            }}\n          >\n            Export Cached Midspans (CSV)\n          </button>\n        )}\n        {!!(store.cachedMidspans || []).length && (\n          <button\n            className=\"px-2 py-0.5 border rounded text-sm\"\n            onClick={() => store.clearCachedMidspans()}\n          >\n            Clear Cached Midspans\n          </button>\n        )}\n        <button\n          className=\"px-2 py-0.5 border rounded text-sm\"\n          onClick={() => {\n            const idx = poleIndex();\n            (store.importedSpans || []).forEach((s, i) => {\n              const f =\n                s.fromId != null ? idx.get(String(s.fromId)) : undefined;\n              const t = s.toId != null ? idx.get(String(s.toId)) : undefined;\n              if (f && t) {\n                const ft = Math.round(\n                  haversineFt(f.latitude, f.longitude, t.latitude, t.longitude),\n                );\n                if (Number.isFinite(ft))\n                  store.updateImportedSpan(i, { lengthFt: ft });\n              }\n            });\n          }}\n        >\n          Autoâ€‘calc All Lengths\n        </button>\n        <button\n          className=\"px-2 py-0.5 border rounded text-sm\"\n          title=\"Compute analysis for all spans and add to cache\"\n          onClick={() => {\n            spans.forEach((_, i) => {\n              try {\n                runCalc(i);\n              } catch {\n                /* ignore */\n              }\n            });\n          }}\n        >\n          Compute All (cache)\n        </button>\n        <button\n          className=\"px-2 py-0.5 border rounded text-sm\"\n          title=\"Clear cache and recompute for all spans\"\n          onClick={() => {\n            try {\n              store.clearCachedMidspans();\n            } catch {\n              /* ignore */\n            }\n            spans.forEach((_, i) => {\n              try {\n                runCalc(i);\n              } catch {\n                /* ignore */\n              }\n            });\n          }}\n        >\n          Recompute All\n        </button>\n        <button\n          className=\"px-2 py-0.5 border rounded text-sm\"\n          title=\"Infer endpoints for spans missing From/To using nearest poles\"\n          onClick={() => {\n            (store.importedSpans || []).forEach((s, i) => {\n              if (s.fromId && s.toId) return;\n              const coords = inferEndpointsForSpan({ ...s });\n              const patch = {};\n              if (!s.fromId && coords?.from?.id) patch.fromId = coords.from.id;\n              if (!s.toId && coords?.to?.id) patch.toId = coords.to.id;\n              if (Object.keys(patch).length) store.updateImportedSpan(i, patch);\n            });\n          }}\n        >\n          Infer Endpoints (All)\n        </button>\n        <button\n          className=\"px-2 py-0.5 border rounded text-sm\"\n          title=\"Overwrite manual lengths with auto-calculated where endpoints are known\"\n          onClick={() => {\n            const idx = poleIndex();\n            (store.importedSpans || []).forEach((s, i) => {\n              const f =\n                s.fromId != null ? idx.get(String(s.fromId)) : undefined;\n              const t = s.toId != null ? idx.get(String(s.toId)) : undefined;\n              if (!f || !t) return;\n              const ft = Math.round(\n                haversineFt(f.latitude, f.longitude, t.latitude, t.longitude),\n              );\n              if (Number.isFinite(ft))\n                store.updateImportedSpan(i, { lengthFt: ft });\n            });\n          }}\n        >\n          Replace all with auto\n        </button>\n      </div>\n      <div className=\"overflow-x-auto break-anywhere\">\n        <table\n          className={`w-full ${store.tableDensity === \"compact\" ? \"text-[11px]\" : \"text-xs md:text-sm\"}`}\n        >\n          <thead className=\"sticky top-0 bg-white z-10\">\n            <tr className=\"text-left text-gray-700\">\n              <th className=\"p-1\">From â†’ To</th>\n              <th className=\"p-1\">Env</th>\n              <th className=\"p-1\">Len (ft)</th>\n              {store.spansColumnSegmentsVisible ? (\n                <th className=\"p-1\">Segments</th>\n              ) : null}\n              <th className=\"p-1\">Midspan</th>\n              <th className=\"p-1\">Target</th>\n              {store.spansColumnActionsVisible ? (\n                <th className=\"p-1\">Actions</th>\n              ) : null}\n            </tr>\n          </thead>\n          <tbody>\n            {spans.map((s, i) => {\n              if (!isRowVisible(i)) return null;\n              const autoLen = getSpanLengthFt(s);\n              const preferAuto = !!store.preferAutoSpanLength;\n              const current = Math.round(\n                s.lengthFt || s.estimatedLengthFt || 0,\n              );\n              const shown = preferAuto\n                ? autoLen || current || 0\n                : current || autoLen || 0;\n              const needsSet = autoLen && autoLen !== s.lengthFt;\n              const idxMap = poleIndex();\n              const f =\n                s.fromId != null ? idxMap.get(String(s.fromId)) : undefined;\n              const t = s.toId != null ? idxMap.get(String(s.toId)) : undefined;\n              const tip = buildAutoTip(autoLen, f, t);\n              const hasManual = !!s.lengthFt;\n              const delta =\n                autoLen && hasManual\n                  ? Math.abs(Number(autoLen) - Number(s.lengthFt))\n                  : 0;\n              const bigDelta =\n                delta >= (Number(store.spanLenDeltaThresholdFt) || 10);\n              const inlineStatus = computeInlineStatus(s, preferAuto, autoLen);\n              const showDetail = openDetail === i && autoLen && f && t;\n              const autoDetail = showDetail\n                ? computeAutoDetailStatus(s, autoLen)\n                : null;\n              return (\n                <tr\n                  key={s.id ? s.id : `span-${i}`}\n                  className={`border-t even:bg-gray-50`}\n                >\n                  <td\n                    className={`px-2 ${store.tableDensity === \"compact\" ? \"py-0.5\" : \"py-1\"}`}\n                  >\n                    {s.fromId || \"?\"} â†’ {s.toId || \"?\"}\n                  </td>\n                  <td\n                    className={`px-2 ${store.tableDensity === \"compact\" ? \"py-0.5\" : \"py-1\"}`}\n                  >\n                    <select\n                      className=\"border rounded px-1 py-0.5\"\n                      value={s.environment || \"\"}\n                      onChange={(e) => onEnvChange(i, e.target.value)}\n                    >\n                      <option value=\"\">(job default)</option>\n                      <option value=\"road\">Road</option>\n                      <option value=\"residential\">Residential</option>\n                      <option value=\"pedestrian\">Pedestrian</option>\n                      <option value=\"field\">Field</option>\n                      <option value=\"residentialYard\">Residential Yard</option>\n                      <option value=\"residentialDriveway\">\n                        Residential Driveway\n                      </option>\n                      <option value=\"nonResidentialDriveway\">\n                        Non-Residential Driveway\n                      </option>\n                      <option value=\"waterway\">Waterway</option>\n                      <option value=\"interstate\">Interstate</option>\n                      <option value=\"interstateNewCrossing\">\n                        Interstate (New Crossing)\n                      </option>\n                      <option value=\"wvHighway\">WV Highway</option>\n                      <option value=\"railroad\">Railroad</option>\n                    </select>\n                  </td>\n                  <td\n                    className={`px-2 ${store.tableDensity === \"compact\" ? \"py-0.5\" : \"py-1\"}`}\n                  >\n                    <span\n                      title={tip}\n                      className=\"relative inline-flex items-center\"\n                    >\n                      {shown}\n                      <span\n                        className=\"ml-1 text-[10px] px-1 py-0.5 rounded border bg-gray-50 text-gray-600\"\n                        title={sourceTitle(preferAuto, s, autoLen)}\n                      >\n                        {sourceLabel(preferAuto, s, autoLen)}\n                      </span>\n                      {autoLen && hasManual ? (\n                        <span\n                          className={`ml-1 text-[10px] px-1 py-0.5 rounded border ${bigDelta ? \"bg-red-50 text-red-700 border-red-300\" : \"bg-gray-50 text-gray-600\"}`}\n                          title={`Î” between manual and auto: ${delta} ft`}\n                        >\n                          Î” {delta}ft\n                        </span>\n                      ) : null}\n                      {inlineStatus != null ? (\n                        <span\n                          className={`ml-1 text-[10px] px-1 py-0.5 rounded border ${inlineStatus ? \"bg-emerald-50 text-emerald-700 border-emerald-300\" : \"bg-red-50 text-red-700 border-red-300\"}`}\n                          title={\n                            inlineStatus\n                              ? \"Midspan â‰¥ target\"\n                              : \"Midspan below target\"\n                          }\n                        >\n                          {inlineStatus ? \"PASS\" : \"FAIL\"}\n                        </span>\n                      ) : null}\n                      {autoLen && f && t ? (\n                        <button\n                          className=\"ml-1 text-xs px-1 py-0.5 border rounded\"\n                          onClick={(e) => {\n                            e.preventDefault();\n                            setOpenDetail(openDetail === i ? null : i);\n                          }}\n                          aria-label=\"Details\"\n                          title=\"Show details\"\n                        >\n                          i\n                        </button>\n                      ) : null}\n                      {showDetail && autoDetail ? (\n                        <div className=\"absolute z-10 mt-1 left-0 bg-white border rounded shadow p-2 text-xs w-64\">\n                          <div className=\"font-medium mb-1\">Auto length</div>\n                          <div className=\"mb-1\">{autoLen} ft</div>\n                          <div className=\"text-gray-600\">\n                            From: {f.latitude?.toFixed?.(6)},{\" \"}\n                            {f.longitude?.toFixed?.(6)}\n                          </div>\n                          <div className=\"text-gray-600\">\n                            To: {t.latitude?.toFixed?.(6)},{\" \"}\n                            {t.longitude?.toFixed?.(6)}\n                          </div>\n                          <div className=\"mt-2\">\n                            <div>\n                              Midspan:{\" \"}\n                              {autoDetail.mid != null\n                                ? formatFeetInches(autoDetail.mid)\n                                : \"â€”\"}{\" \"}\n                              vs Target:{\" \"}\n                              {autoDetail.target != null\n                                ? formatFeetInches(autoDetail.target)\n                                : \"â€”\"}\n                            </div>\n                            <div\n                              className={\n                                autoDetail.ok == null\n                                  ? \"text-gray-600\"\n                                  : autoDetail.ok\n                                    ? \"text-emerald-700\"\n                                    : \"text-red-700\"\n                              }\n                            >\n                              {autoDetail.ok == null\n                                ? \"â€”\"\n                                : autoDetail.ok\n                                  ? \"PASS\"\n                                  : \"FAIL\"}\n                            </div>\n                          </div>\n                          <div className=\"mt-2 flex items-center gap-2\">\n                            <button\n                              className=\"px-2 py-0.5 border rounded\"\n                              onClick={async () => {\n                                try {\n                                  const text = `fromId=${s.fromId || \"\"},toId=${s.toId || \"\"},fromLat=${f.latitude},fromLon=${f.longitude},toLat=${t.latitude},toLon=${t.longitude},autoFt=${autoLen}`;\n                                  await navigator.clipboard?.writeText?.(text);\n                                } catch {\n                                  /* ignore */\n                                }\n                              }}\n                            >\n                              Copy\n                            </button>\n                            <a\n                              className=\"px-2 py-0.5 border rounded inline-block\"\n                              target=\"_blank\"\n                              rel=\"noreferrer\"\n                              href={`https://maps.google.com/?q=${f.latitude},${f.longitude}`}\n                            >\n                              From Map\n                            </a>\n                            <a\n                              className=\"px-2 py-0.5 border rounded inline-block\"\n                              target=\"_blank\"\n                              rel=\"noreferrer\"\n                              href={`https://maps.google.com/?q=${t.latitude},${t.longitude}`}\n                            >\n                              To Map\n                            </a>\n                            {needsSet ? (\n                              <button\n                                className=\"px-2 py-0.5 border rounded\"\n                                title=\"Set manual length to auto\"\n                                onClick={() => {\n                                  store.updateImportedSpan(i, {\n                                    lengthFt: autoLen,\n                                  });\n                                }}\n                              >\n                                Use auto\n                              </button>\n                            ) : null}\n                          </div>\n                          <div className=\"mt-2 text-right\">\n                            <button\n                              className=\"px-2 py-0.5 border rounded\"\n                              onClick={() => setOpenDetail(null)}\n                            >\n                              Close\n                            </button>\n                          </div>\n                        </div>\n                      ) : null}\n                      {needsSet && (\n                        <button\n                          className=\"ml-2 px-1 py-0.5 border rounded text-xs\"\n                          onClick={() =>\n                            store.updateImportedSpan(i, { lengthFt: autoLen })\n                          }\n                          title=\"Set length from coordinates\"\n                        >\n                          set\n                        </button>\n                      )}\n                    </span>\n                  </td>\n                  {store.spansColumnSegmentsVisible ? (\n                    <td\n                      className={`px-2 ${store.tableDensity === \"compact\" ? \"py-0.5\" : \"py-1\"}`}\n                    >\n                      <SegmentEditor\n                        segments={Array.isArray(s.segments) ? s.segments : []}\n                        onChange={(segs) =>\n                          store.updateImportedSpan(i, { segments: segs })\n                        }\n                      />\n                    </td>\n                  ) : null}\n                  <td\n                    className={`px-2 ${store.tableDensity === \"compact\" ? \"py-0.5\" : \"py-1\"}`}\n                  >\n                    â€”\n                  </td>\n                  <td\n                    className={`px-2 ${store.tableDensity === \"compact\" ? \"py-0.5\" : \"py-1\"}`}\n                  >\n                    {(() => {\n                      const target = controllingTargetFromSegments(\n                        s.segments,\n                        s.environment || store.spanEnvironment,\n                      );\n                      return target != null ? formatFeetInches(target) : \"â€”\";\n                    })()}\n                  </td>\n                  {store.spansColumnActionsVisible ? (\n                    <td\n                      className={`px-2 ${store.tableDensity === \"compact\" ? \"py-0.5\" : \"py-1\"} flex gap-2`}\n                    >\n                      <button\n                        className=\"px-2 py-0.5 border rounded\"\n                        onClick={() => runCalc(i)}\n                      >\n                        Calculate\n                      </button>\n                      <button\n                        className=\"px-2 py-0.5 border rounded\"\n                        onClick={() => saveOnly(i)}\n                      >\n                        Save\n                      </button>\n                    </td>\n                  ) : null}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      {!!(store.cachedMidspans || []).length && (\n        <div className=\"mt-3\">\n          <div className=\"font-medium\">Cached Midspans</div>\n          <ul className=\"list-disc pl-5 text-xs text-gray-700\">\n            {(store.cachedMidspans || []).map((m) => {\n              const ok =\n                m.midspanFt != null && m.targetFt != null\n                  ? Number(m.midspanFt) >= Number(m.targetFt)\n                  : null;\n              let statusText = \"\";\n              let statusClass = \"\";\n              if (ok != null) {\n                statusText = ok ? \"PASS\" : \"FAIL\";\n                statusClass = ok\n                  ? \"ml-1 text-emerald-700\"\n                  : \"ml-1 text-red-700\";\n              }\n              return (\n                <li key={m.id}>\n                  Span {m.spanId}: {m.spanFt} ft â€” midspan{\" \"}\n                  {m.midspanFt != null ? formatFeetInches(m.midspanFt) : \"â€”\"} vs\n                  target{\" \"}\n                  {m.targetFt != null ? formatFeetInches(m.targetFt) : \"â€”\"} (\n                  {m.environment || \"default\"})\n                  {statusText ? (\n                    <span className={statusClass}>â€” {statusText}</span>\n                  ) : null}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"names":["LINE_TYPES","ExistingLinesEditor","existingLines","setExistingLines","csvLineMapping","setCsvLineMapping","useTickMarkFormat","useAppStore","fmt","formatFeetInchesTickMarks","formatFeetInchesVerbose","showCsv","setShowCsv","React","csvText","setCsvText","showMapModal","setShowMapModal","headers","setHeaders","parseCSV","text","rows","i","field","row","inQuotes","pushField","pushRow","ch","r","c","update","idx","value","copy","addRow","removeRow","_","duplicateRow","arr","moveRow","dir","to","item","importCSV","parsed","header","name","h","iType","iCompany","iHeight","iMr","iMrH","cols","get","exportCSV","csv","v","blob","url","rowDeltaInches","base","parseFeet","next","rowCost","totalCost","sum","exportSummaryCSV","byCompany","acc","key","deltaIn","cost","cur","k","a","jsxs","jsx","s","e","lines","hdr","pick","alts","t","WV_COMPANIES","Fragment","CsvMapModal","open","onClose","mapping","onChange","keys","set","SegmentEditor","segments","setOpen","segs","setSeg","patch","addSeg","b","removeSeg","total","o","sg","_a","_c","_b","PropTypes","SpansEditor","store","spans","openDetail","setOpenDetail","showFailOnly","setShowFailOnly","showBigDeltaOnly","setShowBigDeltaOnly","onEnvChange","val","getEffectiveProfile","job","j","p","controllingTargetFromSegments","fallbackEnv","controllingGroundTarget","getAllPoles","poleIndex","haversineFt","lat1","lon1","lat2","lon2","toRad","d","dLat","dLon","midpoint","getSpanLengthFt","f","ft","inferEndpointsForSpan","getPole","id","from","mid","midCoord","hintMid","lat","lon","poles","sorted","derived","getSpanLengthFtFast","getSpanMeta","autoLen","manualLen","shownLen","delta","bigDelta","endpoints","pass","fail","computeAnalysis","target","_e","_d","list","counts","x","buckets","isRowVisible","sourceLabel","preferAuto","sourceTitle","computeInlineStatus","spanDistance","buildAnalysisInput","computeAutoDetailStatus","ok","buildAutoTip","_f","_h","_g","determineSpanLenSource","runCalc","spanLenSource","controllingTargetFt","coords","endpointPatch","deficitFt","autoLen2","deltaFt","_i","_k","_j","_m","_l","_o","_n","_q","_p","_s","_r","saveOnly","m","current","shown","needsSet","idxMap","tip","hasManual","inlineStatus","showDetail","autoDetail","formatFeetInches","statusText","statusClass"],"mappings":"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"}